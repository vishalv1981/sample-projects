{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.066459,
     "end_time": "2021-03-22T18:01:40.425582",
     "exception": false,
     "start_time": "2021-03-22T18:01:40.359123",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Logistic Regression on  Amazon Fine food Review \n",
    "The Amazon fine food dataset consists of reviews of fine foods from amazon\n",
    "All data in one sqlite database. 568,454 food reviews Amazon users left up to October 2012\n",
    "Data includes:\n",
    "\n",
    "* Number of reviews :  568,454 reviews\n",
    "* Number of user : 256,059 users\n",
    "* Total Number of Producst : 74,258 products\n",
    "* Time Span of taking Reviews : from Oct 1999 - Oct 2012\n",
    "* Number of Columns/fields : 10\n",
    "\n",
    "***Attributes Information :***\n",
    "1. Id : Row Id\n",
    "1. ProductId :Unique identifier for the product (74258 unique values)\n",
    "1. UserId :Unqiue identifier for the user (256059 unique values)\n",
    "1. ProfileName : Profile name of the user (218418 unique values )\n",
    "1. HelpfulnessNumerator : Number of users who found the review helpful \n",
    "1. HelpfulnessDenominator : Number of users who indicated whether they found the review helpful or not \n",
    "1. Score : Rating between 1 and 5\n",
    "1. Time : Timestamp for the review\n",
    "1. Summary : Brief summary of the review (295744 unique values)\n",
    "1. Text : Text of the review (393579 unique values)\n",
    "\n",
    "> **Objective :** *Given a review ,determine whether a review is postive or negative*\n",
    "\n",
    "**Q].** *How to determine if a review is postive or negative?*\n",
    "\n",
    "**Ans.** We can use the Score/rating. A rating of 4 or 5 could be considered as positive review & A rating of 1 or 2 can be consider as negative review . A rating of 3 can be consider as neutral and can be ignored . This is the approximation and proxy way to approach way of determing the polarity(positivity/negativity) of reviews."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.066404,
     "end_time": "2021-03-22T18:01:40.688513",
     "exception": false,
     "start_time": "2021-03-22T18:01:40.622109",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Importing important library"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-22T18:01:40.833476Z",
     "iopub.status.busy": "2021-03-22T18:01:40.832625Z",
     "iopub.status.idle": "2021-03-22T18:01:42.754656Z",
     "shell.execute_reply": "2021-03-22T18:01:42.753489Z"
    },
    "papermill": {
     "duration": 2.00097,
     "end_time": "2021-03-22T18:01:42.754874",
     "exception": false,
     "start_time": "2021-03-22T18:01:40.753904",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: kaggle in /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages (1.6.17)\n",
      "Requirement already satisfied: certifi>=2023.7.22 in /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages (from kaggle) (2023.11.17)\n",
      "Requirement already satisfied: tqdm in /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages (from kaggle) (4.66.5)\n",
      "Requirement already satisfied: python-dateutil in /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages (from kaggle) (2.8.2)\n",
      "Requirement already satisfied: python-slugify in /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages (from kaggle) (8.0.4)\n",
      "Requirement already satisfied: bleach in /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages (from kaggle) (6.1.0)\n",
      "Requirement already satisfied: requests in /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages (from kaggle) (2.31.0)\n",
      "Requirement already satisfied: six>=1.10 in /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages (from kaggle) (1.16.0)\n",
      "Requirement already satisfied: urllib3 in /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages (from kaggle) (2.1.0)\n",
      "Requirement already satisfied: webencodings in /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages (from bleach->kaggle) (0.5.1)\n",
      "Requirement already satisfied: text-unidecode>=1.3 in /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages (from python-slugify->kaggle) (1.3)\n",
      "Requirement already satisfied: idna<4,>=2.5 in /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages (from requests->kaggle) (3.6)\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages (from requests->kaggle) (3.3.2)\n",
      "\u001b[33mWARNING: You are using pip version 21.1.1; however, version 24.2 is available.\n",
      "You should consider upgrading via the '/Library/Frameworks/Python.framework/Versions/3.8/bin/python3.8 -m pip install --upgrade pip' command.\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "import sqlite3\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "#mterics \n",
    "from sklearn import metrics\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.metrics import precision_score\n",
    "from sklearn.metrics import f1_score\n",
    "from sklearn.metrics import recall_score\n",
    "from sklearn.metrics import confusion_matrix \n",
    "from sklearn.metrics import roc_auc_score\n",
    "\n",
    "import string\n",
    "import nltk\n",
    "from nltk.stem import SnowballStemmer\n",
    "from nltk.stem import PorterStemmer\n",
    "from nltk.stem.wordnet import WordNetLemmatizer\n",
    "from nltk.corpus import stopwords\n",
    "\n",
    "import gensim\n",
    "from gensim.models import KeyedVectors\n",
    "from gensim.models import Word2Vec\n",
    "\n",
    "import os\n",
    "import pickle \n",
    "from tqdm import tqdm\n",
    "import re\n",
    "import string\n",
    "import nltk\n",
    "from nltk.corpus import stopwords\n",
    "from nltk.stem import SnowballStemmer\n",
    "import os\n",
    "from bs4 import BeautifulSoup\n",
    "import swifter\n",
    "from nltk.corpus import stopwords\n",
    "import nltk\n",
    "!pip3 install kaggle\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Downloading dataset as amazon_fine_food_reviews.csv...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Download complete. File saved as ./dataset/amazon_fine_food_reviews.csv\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'./dataset/amazon_fine_food_reviews.csv'"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import os\n",
    "import requests\n",
    "from IPython.display import display\n",
    "import zipfile\n",
    "\n",
    "import os\n",
    "import requests\n",
    "from IPython.display import display\n",
    "import zipfile\n",
    "\n",
    "def download_dataset(url, file_name, folder='data'):\n",
    "    \"\"\"\n",
    "    Download a public dataset from Kaggle using a direct URL in a Jupyter notebook.\n",
    "\n",
    "    :param url: Direct download URL of the dataset\n",
    "    :param file_name: Custom name for the downloaded zip file\n",
    "    :param folder: Relative folder where the dataset will be saved (default: 'data')\n",
    "    \"\"\"\n",
    "    # Ensure the directory exists\n",
    "    path = folder\n",
    "    if not os.path.exists(path):\n",
    "        os.makedirs(path)\n",
    "\n",
    "    # Full path for the zip file\n",
    "    file_path = os.path.join(path, file_name)\n",
    "\n",
    "    # Download the file from the given URL\n",
    "    print(f\"Downloading dataset as {file_name}...\")\n",
    "    \n",
    "    response = requests.get(url, stream=True)\n",
    "    \n",
    "    with open(file_path, 'wb') as file:\n",
    "        for chunk in response.iter_content(chunk_size=1024):\n",
    "            if chunk:\n",
    "                file.write(chunk)\n",
    "    \n",
    "    print(f\"Download complete. File saved as {file_path}\")\n",
    "    \n",
    "    return file_path\n",
    "\n",
    "def extract_zip(file_path, extract_to='.'):\n",
    "    \"\"\"\n",
    "    Extract a zip file in the specified relative directory.\n",
    "\n",
    "    :param file_path: Path of the zip file to be extracted\n",
    "    :param extract_to: Path where the files will be extracted (default: current directory)\n",
    "    \"\"\"\n",
    "    print(f\"Extracting {file_path} to {extract_to}...\")\n",
    "    \n",
    "    with zipfile.ZipFile(file_path, 'r') as zip_ref:\n",
    "        zip_ref.extractall(extract_to)\n",
    "    \n",
    "    print(f\"Files extracted to {extract_to}.\")\n",
    "\n",
    "relative_path = \"./dataset\"\n",
    "file_name = \"amazon_fine_food_reviews.csv\"\n",
    "\n",
    "download_dataset(\"https://storage.googleapis.com/kaggle-data-sets/18/2157/bundle/archive.zip\", file_name=file_name,  folder=relative_path )\n",
    "\n",
    "#download_dataset(\"https://www.kaggle.com/datasets/snap/amazon-fine-food-reviews/download?datasetVersionNumber=2\", file_name=file_name,  folder=relative_path )\n",
    "#extract_zip(relative_path,  relative_path)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.071023,
     "end_time": "2021-03-22T18:01:42.891753",
     "exception": false,
     "start_time": "2021-03-22T18:01:42.820730",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Reading Data from Sqlite database and changing the review score to be positive and negative."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-22T18:01:43.036200Z",
     "iopub.status.busy": "2021-03-22T18:01:43.035289Z",
     "iopub.status.idle": "2021-03-22T18:01:55.980251Z",
     "shell.execute_reply": "2021-03-22T18:01:55.981705Z"
    },
    "papermill": {
     "duration": 13.024391,
     "end_time": "2021-03-22T18:01:55.981961",
     "exception": false,
     "start_time": "2021-03-22T18:01:42.957570",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No. of data points in Dataset: (525814, 10)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>ProductId</th>\n",
       "      <th>UserId</th>\n",
       "      <th>ProfileName</th>\n",
       "      <th>HelpfulnessNumerator</th>\n",
       "      <th>HelpfulnessDenominator</th>\n",
       "      <th>Score</th>\n",
       "      <th>Time</th>\n",
       "      <th>Summary</th>\n",
       "      <th>Text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>B001E4KFG0</td>\n",
       "      <td>A3SGXH7AUHU8GW</td>\n",
       "      <td>delmartian</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1303862400</td>\n",
       "      <td>Good Quality Dog Food</td>\n",
       "      <td>I have bought several of the Vitality canned d...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>B00813GRG4</td>\n",
       "      <td>A1D87F6ZCVE5NK</td>\n",
       "      <td>dll pa</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1346976000</td>\n",
       "      <td>Not as Advertised</td>\n",
       "      <td>Product arrived labeled as Jumbo Salted Peanut...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>B000LQOCH0</td>\n",
       "      <td>ABXLMWJIXXAIN</td>\n",
       "      <td>Natalia Corres \"Natalia Corres\"</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1219017600</td>\n",
       "      <td>\"Delight\" says it all</td>\n",
       "      <td>This is a confection that has been around a fe...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Id   ProductId          UserId                      ProfileName  \\\n",
       "0   1  B001E4KFG0  A3SGXH7AUHU8GW                       delmartian   \n",
       "1   2  B00813GRG4  A1D87F6ZCVE5NK                           dll pa   \n",
       "2   3  B000LQOCH0   ABXLMWJIXXAIN  Natalia Corres \"Natalia Corres\"   \n",
       "\n",
       "   HelpfulnessNumerator  HelpfulnessDenominator  Score        Time  \\\n",
       "0                     1                       1      1  1303862400   \n",
       "1                     0                       0      0  1346976000   \n",
       "2                     1                       1      1  1219017600   \n",
       "\n",
       "                 Summary                                               Text  \n",
       "0  Good Quality Dog Food  I have bought several of the Vitality canned d...  \n",
       "1      Not as Advertised  Product arrived labeled as Jumbo Salted Peanut...  \n",
       "2  \"Delight\" says it all  This is a confection that has been around a fe...  "
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Using the sqlite table to read data\n",
    "con = sqlite3.connect('/Users/krithishetty/Downloads/finefoodreviews/database.sqlite')\n",
    "# Filtering only Positive and Negative Reviews i.e not taking into consideration those reviews with score=3\n",
    "filtered_data= pd.read_sql_query(\"\"\"SELECT * FROM Reviews WHERE Score!=3\"\"\",con)\n",
    "#Given reviews with score>3 a postive rating \"1\" and reviews with score <3 a negative \"0\"\n",
    "#constucting a function\n",
    "def partition(x):\n",
    "    if x<3:\n",
    "        return 0\n",
    "    return 1\n",
    "#Changing reviews with score<3 to be negative \"0\" and score > 3 to be positive \"1\"\n",
    "actualscore=filtered_data['Score']\n",
    "Positve_Negative=actualscore.map(partition)\n",
    "filtered_data['Score']=Positve_Negative\n",
    "print(\"No. of data points in Dataset:\",filtered_data.shape)\n",
    "filtered_data.head(3)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-22T18:01:56.351034Z",
     "iopub.status.busy": "2021-03-22T18:01:56.350100Z",
     "iopub.status.idle": "2021-03-22T18:02:02.598157Z",
     "shell.execute_reply": "2021-03-22T18:02:02.597151Z"
    },
    "papermill": {
     "duration": 6.317839,
     "end_time": "2021-03-22T18:02:02.598312",
     "exception": false,
     "start_time": "2021-03-22T18:01:56.280473",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>ProductId</th>\n",
       "      <th>UserId</th>\n",
       "      <th>ProfileName</th>\n",
       "      <th>HelpfulnessNumerator</th>\n",
       "      <th>HelpfulnessDenominator</th>\n",
       "      <th>Score</th>\n",
       "      <th>Time</th>\n",
       "      <th>Summary</th>\n",
       "      <th>Text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>78445</td>\n",
       "      <td>B000HDL1RQ</td>\n",
       "      <td>AR5J8UI46CURR</td>\n",
       "      <td>Geetha Krishnan</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>1199577600</td>\n",
       "      <td>LOACKER QUADRATINI VANILLA WAFERS</td>\n",
       "      <td>DELICIOUS WAFERS. I FIND THAT EUROPEAN WAFERS ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>138317</td>\n",
       "      <td>B000HDOPYC</td>\n",
       "      <td>AR5J8UI46CURR</td>\n",
       "      <td>Geetha Krishnan</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>1199577600</td>\n",
       "      <td>LOACKER QUADRATINI VANILLA WAFERS</td>\n",
       "      <td>DELICIOUS WAFERS. I FIND THAT EUROPEAN WAFERS ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>138277</td>\n",
       "      <td>B000HDOPYM</td>\n",
       "      <td>AR5J8UI46CURR</td>\n",
       "      <td>Geetha Krishnan</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>1199577600</td>\n",
       "      <td>LOACKER QUADRATINI VANILLA WAFERS</td>\n",
       "      <td>DELICIOUS WAFERS. I FIND THAT EUROPEAN WAFERS ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>73791</td>\n",
       "      <td>B000HDOPZG</td>\n",
       "      <td>AR5J8UI46CURR</td>\n",
       "      <td>Geetha Krishnan</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>1199577600</td>\n",
       "      <td>LOACKER QUADRATINI VANILLA WAFERS</td>\n",
       "      <td>DELICIOUS WAFERS. I FIND THAT EUROPEAN WAFERS ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>155049</td>\n",
       "      <td>B000PAQ75C</td>\n",
       "      <td>AR5J8UI46CURR</td>\n",
       "      <td>Geetha Krishnan</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>1199577600</td>\n",
       "      <td>LOACKER QUADRATINI VANILLA WAFERS</td>\n",
       "      <td>DELICIOUS WAFERS. I FIND THAT EUROPEAN WAFERS ...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Id   ProductId         UserId      ProfileName  HelpfulnessNumerator  \\\n",
       "0   78445  B000HDL1RQ  AR5J8UI46CURR  Geetha Krishnan                     2   \n",
       "1  138317  B000HDOPYC  AR5J8UI46CURR  Geetha Krishnan                     2   \n",
       "2  138277  B000HDOPYM  AR5J8UI46CURR  Geetha Krishnan                     2   \n",
       "3   73791  B000HDOPZG  AR5J8UI46CURR  Geetha Krishnan                     2   \n",
       "4  155049  B000PAQ75C  AR5J8UI46CURR  Geetha Krishnan                     2   \n",
       "\n",
       "   HelpfulnessDenominator  Score        Time  \\\n",
       "0                       2      5  1199577600   \n",
       "1                       2      5  1199577600   \n",
       "2                       2      5  1199577600   \n",
       "3                       2      5  1199577600   \n",
       "4                       2      5  1199577600   \n",
       "\n",
       "                             Summary  \\\n",
       "0  LOACKER QUADRATINI VANILLA WAFERS   \n",
       "1  LOACKER QUADRATINI VANILLA WAFERS   \n",
       "2  LOACKER QUADRATINI VANILLA WAFERS   \n",
       "3  LOACKER QUADRATINI VANILLA WAFERS   \n",
       "4  LOACKER QUADRATINI VANILLA WAFERS   \n",
       "\n",
       "                                                Text  \n",
       "0  DELICIOUS WAFERS. I FIND THAT EUROPEAN WAFERS ...  \n",
       "1  DELICIOUS WAFERS. I FIND THAT EUROPEAN WAFERS ...  \n",
       "2  DELICIOUS WAFERS. I FIND THAT EUROPEAN WAFERS ...  \n",
       "3  DELICIOUS WAFERS. I FIND THAT EUROPEAN WAFERS ...  \n",
       "4  DELICIOUS WAFERS. I FIND THAT EUROPEAN WAFERS ...  "
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "display= pd.read_sql_query(\"\"\"SELECT * FROM Reviews WHERE Score !=3 AND UserId ='AR5J8UI46CURR' ORDER BY ProductId \"\"\",con)\n",
    "display"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.068516,
     "end_time": "2021-03-22T18:02:02.737538",
     "exception": false,
     "start_time": "2021-03-22T18:02:02.669022",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**As it can be seen above the same user has multiple reviews of the same values for HelpfulnessNumerator, HelpfulnessDenominator, Score, Time, Summary and Text and on doing analysis it was found that ProductId=B000HDOPZG was Loacker Quadratini Vanilla Wafer Cookies, 8.82-Ounce Packages (Pack of 8)**\n",
    "\n",
    "**ProductId=B000HDL1RQ was Loacker Quadratini Lemon Wafer Cookies, 8.82-Ounce Packages (Pack of 8) and so on**\n",
    "\n",
    "**It was inferred after analysis that reviews with same parameters other than ProductId belonged to the same product just having different flavour or quantity. Hence in order to reduce redundancy it was decided to eliminate the rows having same parameters.**\n",
    "\n",
    "**The method used for the same was that we first sort the data according to ProductId and then just keep the first similar product review and delelte the others. for eg. in the above just the review for ProductId=B000HDL1RQ remains. This method ensures that there is only one representative for each product and deduplication without sorting would lead to possibility of different representatives still existing for the same product**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-22T18:02:02.932460Z",
     "iopub.status.busy": "2021-03-22T18:02:02.930602Z",
     "iopub.status.idle": "2021-03-22T18:02:03.900233Z",
     "shell.execute_reply": "2021-03-22T18:02:03.899618Z"
    },
    "papermill": {
     "duration": 1.094285,
     "end_time": "2021-03-22T18:02:03.900385",
     "exception": false,
     "start_time": "2021-03-22T18:02:02.806100",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>ProductId</th>\n",
       "      <th>UserId</th>\n",
       "      <th>ProfileName</th>\n",
       "      <th>HelpfulnessNumerator</th>\n",
       "      <th>HelpfulnessDenominator</th>\n",
       "      <th>Score</th>\n",
       "      <th>Time</th>\n",
       "      <th>Summary</th>\n",
       "      <th>Text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>78445</td>\n",
       "      <td>B000HDL1RQ</td>\n",
       "      <td>AR5J8UI46CURR</td>\n",
       "      <td>Geetha Krishnan</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>1199577600</td>\n",
       "      <td>LOACKER QUADRATINI VANILLA WAFERS</td>\n",
       "      <td>DELICIOUS WAFERS. I FIND THAT EUROPEAN WAFERS ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>138317</td>\n",
       "      <td>B000HDOPYC</td>\n",
       "      <td>AR5J8UI46CURR</td>\n",
       "      <td>Geetha Krishnan</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>1199577600</td>\n",
       "      <td>LOACKER QUADRATINI VANILLA WAFERS</td>\n",
       "      <td>DELICIOUS WAFERS. I FIND THAT EUROPEAN WAFERS ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>138277</td>\n",
       "      <td>B000HDOPYM</td>\n",
       "      <td>AR5J8UI46CURR</td>\n",
       "      <td>Geetha Krishnan</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>1199577600</td>\n",
       "      <td>LOACKER QUADRATINI VANILLA WAFERS</td>\n",
       "      <td>DELICIOUS WAFERS. I FIND THAT EUROPEAN WAFERS ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>73791</td>\n",
       "      <td>B000HDOPZG</td>\n",
       "      <td>AR5J8UI46CURR</td>\n",
       "      <td>Geetha Krishnan</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>1199577600</td>\n",
       "      <td>LOACKER QUADRATINI VANILLA WAFERS</td>\n",
       "      <td>DELICIOUS WAFERS. I FIND THAT EUROPEAN WAFERS ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>155049</td>\n",
       "      <td>B000PAQ75C</td>\n",
       "      <td>AR5J8UI46CURR</td>\n",
       "      <td>Geetha Krishnan</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>1199577600</td>\n",
       "      <td>LOACKER QUADRATINI VANILLA WAFERS</td>\n",
       "      <td>DELICIOUS WAFERS. I FIND THAT EUROPEAN WAFERS ...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Id   ProductId         UserId      ProfileName  HelpfulnessNumerator  \\\n",
       "0   78445  B000HDL1RQ  AR5J8UI46CURR  Geetha Krishnan                     2   \n",
       "1  138317  B000HDOPYC  AR5J8UI46CURR  Geetha Krishnan                     2   \n",
       "2  138277  B000HDOPYM  AR5J8UI46CURR  Geetha Krishnan                     2   \n",
       "3   73791  B000HDOPZG  AR5J8UI46CURR  Geetha Krishnan                     2   \n",
       "4  155049  B000PAQ75C  AR5J8UI46CURR  Geetha Krishnan                     2   \n",
       "\n",
       "   HelpfulnessDenominator  Score        Time  \\\n",
       "0                       2      5  1199577600   \n",
       "1                       2      5  1199577600   \n",
       "2                       2      5  1199577600   \n",
       "3                       2      5  1199577600   \n",
       "4                       2      5  1199577600   \n",
       "\n",
       "                             Summary  \\\n",
       "0  LOACKER QUADRATINI VANILLA WAFERS   \n",
       "1  LOACKER QUADRATINI VANILLA WAFERS   \n",
       "2  LOACKER QUADRATINI VANILLA WAFERS   \n",
       "3  LOACKER QUADRATINI VANILLA WAFERS   \n",
       "4  LOACKER QUADRATINI VANILLA WAFERS   \n",
       "\n",
       "                                                Text  \n",
       "0  DELICIOUS WAFERS. I FIND THAT EUROPEAN WAFERS ...  \n",
       "1  DELICIOUS WAFERS. I FIND THAT EUROPEAN WAFERS ...  \n",
       "2  DELICIOUS WAFERS. I FIND THAT EUROPEAN WAFERS ...  \n",
       "3  DELICIOUS WAFERS. I FIND THAT EUROPEAN WAFERS ...  \n",
       "4  DELICIOUS WAFERS. I FIND THAT EUROPEAN WAFERS ...  "
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Sorting data according to ProductId in ascending order\n",
    "sorted_data=filtered_data.sort_values(\"ProductId\",axis=0,ascending=True,inplace=False,kind='quicksort',na_position='last')\n",
    "display.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-22T18:02:04.077662Z",
     "iopub.status.busy": "2021-03-22T18:02:04.076711Z",
     "iopub.status.idle": "2021-03-22T18:02:05.226346Z",
     "shell.execute_reply": "2021-03-22T18:02:05.225304Z"
    },
    "papermill": {
     "duration": 1.257172,
     "end_time": "2021-03-22T18:02:05.226501",
     "exception": false,
     "start_time": "2021-03-22T18:02:03.969329",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(364173, 10)"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Deduplication entries\n",
    "final_data=sorted_data.drop_duplicates(subset={\"UserId\",\"ProfileName\",\"Time\",\"Text\"},keep='first',inplace=False)\n",
    "final_data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-22T18:02:05.372065Z",
     "iopub.status.busy": "2021-03-22T18:02:05.371077Z",
     "iopub.status.idle": "2021-03-22T18:02:05.376473Z",
     "shell.execute_reply": "2021-03-22T18:02:05.377897Z"
    },
    "papermill": {
     "duration": 0.082083,
     "end_time": "2021-03-22T18:02:05.378254",
     "exception": false,
     "start_time": "2021-03-22T18:02:05.296171",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The total data remain after cleaning data  69.25890143662969\n"
     ]
    }
   ],
   "source": [
    "#Checking to see how much % of data still remains\n",
    "print('The total data remain after cleaning data ',(final_data['Id'].size*1.0)/(filtered_data['Id'].size*1.0)*100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-22T18:02:05.522606Z",
     "iopub.status.busy": "2021-03-22T18:02:05.521929Z",
     "iopub.status.idle": "2021-03-22T18:02:05.555488Z",
     "shell.execute_reply": "2021-03-22T18:02:05.554305Z"
    },
    "papermill": {
     "duration": 0.107391,
     "end_time": "2021-03-22T18:02:05.555640",
     "exception": false,
     "start_time": "2021-03-22T18:02:05.448249",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>ProductId</th>\n",
       "      <th>UserId</th>\n",
       "      <th>ProfileName</th>\n",
       "      <th>HelpfulnessNumerator</th>\n",
       "      <th>HelpfulnessDenominator</th>\n",
       "      <th>Score</th>\n",
       "      <th>Time</th>\n",
       "      <th>Summary</th>\n",
       "      <th>Text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>59301</th>\n",
       "      <td>64422</td>\n",
       "      <td>B000MIDROQ</td>\n",
       "      <td>A161DK06JJMCYF</td>\n",
       "      <td>J. E. Stephens \"Jeanne\"</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1224892800</td>\n",
       "      <td>Bought This for My Son at College</td>\n",
       "      <td>My son loves spaghetti so I didn't hesitate or...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41159</th>\n",
       "      <td>44737</td>\n",
       "      <td>B001EQ55RW</td>\n",
       "      <td>A2V0I904FH7ABY</td>\n",
       "      <td>Ram</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1212883200</td>\n",
       "      <td>Pure cocoa taste with crunchy almonds inside</td>\n",
       "      <td>It was almost a 'love at first bite' - the per...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Id   ProductId          UserId              ProfileName  \\\n",
       "59301  64422  B000MIDROQ  A161DK06JJMCYF  J. E. Stephens \"Jeanne\"   \n",
       "41159  44737  B001EQ55RW  A2V0I904FH7ABY                      Ram   \n",
       "\n",
       "       HelpfulnessNumerator  HelpfulnessDenominator  Score        Time  \\\n",
       "59301                     3                       1      1  1224892800   \n",
       "41159                     3                       2      1  1212883200   \n",
       "\n",
       "                                            Summary  \\\n",
       "59301             Bought This for My Son at College   \n",
       "41159  Pure cocoa taste with crunchy almonds inside   \n",
       "\n",
       "                                                    Text  \n",
       "59301  My son loves spaghetti so I didn't hesitate or...  \n",
       "41159  It was almost a 'love at first bite' - the per...  "
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_data[final_data['HelpfulnessNumerator']>final_data['HelpfulnessDenominator']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-22T18:02:05.699226Z",
     "iopub.status.busy": "2021-03-22T18:02:05.698242Z",
     "iopub.status.idle": "2021-03-22T18:02:05.760408Z",
     "shell.execute_reply": "2021-03-22T18:02:05.761411Z"
    },
    "papermill": {
     "duration": 0.137368,
     "end_time": "2021-03-22T18:02:05.761574",
     "exception": false,
     "start_time": "2021-03-22T18:02:05.624206",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>ProductId</th>\n",
       "      <th>UserId</th>\n",
       "      <th>ProfileName</th>\n",
       "      <th>HelpfulnessNumerator</th>\n",
       "      <th>HelpfulnessDenominator</th>\n",
       "      <th>Score</th>\n",
       "      <th>Time</th>\n",
       "      <th>Summary</th>\n",
       "      <th>Text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>64422</td>\n",
       "      <td>B000MIDROQ</td>\n",
       "      <td>A161DK06JJMCYF</td>\n",
       "      <td>J. E. Stephens \"Jeanne\"</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>1224892800</td>\n",
       "      <td>Bought This for My Son at College</td>\n",
       "      <td>My son loves spaghetti so I didn't hesitate or...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>44737</td>\n",
       "      <td>B001EQ55RW</td>\n",
       "      <td>A2V0I904FH7ABY</td>\n",
       "      <td>Ram</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>1212883200</td>\n",
       "      <td>Pure cocoa taste with crunchy almonds inside</td>\n",
       "      <td>It was almost a 'love at first bite' - the per...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Id   ProductId          UserId              ProfileName  \\\n",
       "0  64422  B000MIDROQ  A161DK06JJMCYF  J. E. Stephens \"Jeanne\"   \n",
       "1  44737  B001EQ55RW  A2V0I904FH7ABY                      Ram   \n",
       "\n",
       "   HelpfulnessNumerator  HelpfulnessDenominator  Score        Time  \\\n",
       "0                     3                       1      5  1224892800   \n",
       "1                     3                       2      4  1212883200   \n",
       "\n",
       "                                        Summary  \\\n",
       "0             Bought This for My Son at College   \n",
       "1  Pure cocoa taste with crunchy almonds inside   \n",
       "\n",
       "                                                Text  \n",
       "0  My son loves spaghetti so I didn't hesitate or...  \n",
       "1  It was almost a 'love at first bite' - the per...  "
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "display=pd.read_sql_query(\"\"\"SELECT * FROM Reviews WHERE Score!=3 AND Id=44737 OR Id=64422\n",
    "ORDER BY ProductID\"\"\",con)\n",
    "display.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.130419,
     "end_time": "2021-03-22T18:02:05.962469",
     "exception": false,
     "start_time": "2021-03-22T18:02:05.832050",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Observation:** It was seen that in 2 rows given above the value of HelpfullnessNumerator is Greater than HelpfullnessDenominator which is not practically hence such rows are too removed from dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-22T18:02:06.232242Z",
     "iopub.status.busy": "2021-03-22T18:02:06.230930Z",
     "iopub.status.idle": "2021-03-22T18:02:06.403169Z",
     "shell.execute_reply": "2021-03-22T18:02:06.402336Z"
    },
    "papermill": {
     "duration": 0.298979,
     "end_time": "2021-03-22T18:02:06.403439",
     "exception": false,
     "start_time": "2021-03-22T18:02:06.104460",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(364171, 10)"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_data=final_data[final_data['HelpfulnessNumerator']<=final_data['HelpfulnessDenominator']]\n",
    "final_data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-22T18:02:06.734125Z",
     "iopub.status.busy": "2021-03-22T18:02:06.733121Z",
     "iopub.status.idle": "2021-03-22T18:02:07.127292Z",
     "shell.execute_reply": "2021-03-22T18:02:07.128458Z"
    },
    "papermill": {
     "duration": 0.58914,
     "end_time": "2021-03-22T18:02:07.128693",
     "exception": false,
     "start_time": "2021-03-22T18:02:06.539553",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(364171, 10)\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Score')"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# before starting the next phase of text preprocessing lets see the no. of entries left\n",
    "print(final_data.shape)\n",
    "#How many positive and negative reviews are present in our dataset?\n",
    "final_data['Score'].value_counts()\n",
    "sns.set(style=\"whitegrid\")\n",
    "custom_palette = sns.color_palette(\"Set2\")\n",
    "\n",
    "# Create a count plot for the 'Score' column with the custom palette\n",
    "plt.figure(figsize=(10, 6))\n",
    "sns.countplot(x='Score', data=final_data, palette=custom_palette)\n",
    "plt.title('Distribution of Review Scores', fontsize=16)\n",
    "plt.xlabel('Score', fontsize=14)\n",
    "plt.ylabel('Count', fontsize=14)\n",
    "plt.show()\n",
    "\n",
    "# Create a count plot with 'Score' on the y-axis using the custom palette\n",
    "plt.figure(figsize=(10, 6))\n",
    "sns.countplot(y='Score', data=final_data, palette=custom_palette)\n",
    "plt.title('Distribution of Review Scores', fontsize=16)\n",
    "plt.xlabel('Count', fontsize=14)\n",
    "plt.ylabel('Score', fontsize=14)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.075573,
     "end_time": "2021-03-22T18:02:07.327979",
     "exception": false,
     "start_time": "2021-03-22T18:02:07.252406",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Text Preprocessing\n",
    "**Now we have finished deduplication. Now our data requires some preprocessing before we go on futher anlysis and make the prediction model Hence in the preprocessing phase we do the following steps given below**\n",
    "\n",
    "1. Begin by removing html tags\n",
    "1. Removing any punctution or limited set of special character:like ,or . or # etc\n",
    "1. Check the words is made up of english letters and is not alpha-numeric\n",
    "1. Check to see if the length of the words is greater than 2 (as it was research that there is no adjective in 2 letter)\n",
    "1. Convert the words to lowercase\n",
    "1. Remove stopwords\n",
    "1. Snowball stemming the word(it is observed that Snoball stemming is better that Porter stemming)\n",
    "\n",
    "***After this we will collect the words and will use to describe positive and negative reviews.***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-22T18:02:07.484214Z",
     "iopub.status.busy": "2021-03-22T18:02:07.482340Z",
     "iopub.status.idle": "2021-03-22T18:02:07.486950Z",
     "shell.execute_reply": "2021-03-22T18:02:07.484872Z"
    },
    "papermill": {
     "duration": 0.084934,
     "end_time": "2021-03-22T18:02:07.487091",
     "exception": false,
     "start_time": "2021-03-22T18:02:07.402157",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "First review containing HTML tags:\n",
      "I set aside at least an hour each day to read to my son (3 y/o). At this point, I consider myself a connoisseur of children's books and this is one of the best. Santa Clause put this under the tree. Since then, we've read it perpetually and he loves it.<br /><br />First, this book taught him the months of the year.<br /><br />Second, it's a pleasure to read. Well suited to 1.5 y/o old to 4+.<br /><br />Very few children's books are worth owning. Most should be borrowed from the library. This book, however, deserves a permanent spot on your shelf. Sendak's best.\n",
      "Found at index: 6\n"
     ]
    }
   ],
   "source": [
    "# Finding the first review with HTML tags\n",
    "for i, review in enumerate(final_data['Text'].values):\n",
    "    # Use regex to find HTML tags in the review text\n",
    "    if re.search(r'<.*?>', review):\n",
    "        print(\"First review containing HTML tags:\")\n",
    "        print(review)\n",
    "        print(f\"Found at index: {i}\")\n",
    "        break\n",
    "else:\n",
    "    print(\"No HTML tags found in any review.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-22T18:02:07.642807Z",
     "iopub.status.busy": "2021-03-22T18:02:07.642028Z",
     "iopub.status.idle": "2021-03-22T18:02:07.657168Z",
     "shell.execute_reply": "2021-03-22T18:02:07.657997Z"
    },
    "papermill": {
     "duration": 0.100016,
     "end_time": "2021-03-22T18:02:07.658252",
     "exception": false,
     "start_time": "2021-03-22T18:02:07.558236",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original stopwords: {'o', 'being', 'above', 'd', \"weren't\", 'couldn', 'how', 'our', 'a', 'down', 's', 'during', 'all', \"don't\", 'from', 'now', 'against', \"mightn't\", 'which', 'its', 'll', \"you'd\", 'whom', 'about', 'there', 'he', 'himself', \"she's\", 'further', 'needn', 'ours', 'doing', 'on', 'why', 'and', 'here', 'out', \"should've\", 'own', \"you've\", 'because', 'between', 'most', 'i', 'hasn', 'below', 'yours', 'once', 'such', \"hadn't\", 'but', 'has', 'were', 'yourselves', \"that'll\", 'me', 'both', 'for', \"aren't\", \"didn't\", 'him', 'are', \"haven't\", 'too', 'we', 'after', 'just', 'themselves', 'myself', 'over', 'of', 'doesn', 'her', 'by', 'hadn', 'each', 'theirs', 'other', 'she', 'under', 'you', 'ma', \"isn't\", 'they', 'have', 'while', 'where', 'shouldn', 'does', 'not', 'the', \"wasn't\", \"hasn't\", \"shouldn't\", 'as', 'through', \"you'll\", 't', 'don', 'so', 'no', 'their', \"shan't\", 've', \"wouldn't\", 'ourselves', 'it', 'up', 'been', 'if', 'did', 'didn', 'until', 'into', 'y', 'your', 'these', 'am', 'when', 'do', \"won't\", 'was', \"mustn't\", \"needn't\", 'at', 'my', 'than', 'before', 'will', 'can', 'very', 'to', 'in', 'm', 'had', 'mustn', 'only', \"doesn't\", 'that', 'mightn', 'herself', \"couldn't\", 'with', 'wasn', 'few', 'an', 'ain', 'off', 'who', 'or', 'same', 'his', 'having', 'shan', 'hers', \"it's\", 'weren', 're', 'this', 'those', \"you're\", 'is', 'should', 'haven', 'isn', 'nor', 'won', 'yourself', 'what', 'then', 'itself', 'be', 'aren', 'them', 'some', 'wouldn', 'more', 'again', 'any'}\n",
      "************************************************************\n",
      "Customized stopwords: ['o', 'being', 'above', 'd', 'how', 'our', 'a', 'down', 's', 'during', 'all', 'from', 'now', 'which', 'its', 'll', \"you'd\", 'whom', 'about', 'there', 'he', 'himself', \"she's\", 'further', 'ours', 'doing', 'on', 'why', 'and', 'here', 'out', \"should've\", 'own', \"you've\", 'because', 'between', 'most', 'i', 'below', 'yours', 'once', 'such', 'but', 'has', 'were', 'yourselves', \"that'll\", 'me', 'both', 'for', 'him', 'are', 'too', 'we', 'after', 'just', 'themselves', 'myself', 'over', 'of', 'her', 'by', 'each', 'theirs', 'other', 'she', 'under', 'you', 'ma', 'they', 'have', 'while', 'where', 'does', 'the', 'as', 'through', \"you'll\", 't', 'so', 'no', 'their', \"shan't\", 've', 'ourselves', 'it', 'up', 'been', 'if', 'did', 'until', 'into', 'y', 'your', 'these', 'am', 'when', 'do', 'was', 'at', 'my', 'than', 'before', 'will', 'can', 'very', 'to', 'in', 'm', 'had', 'only', 'that', 'herself', 'with', 'few', 'an', 'off', 'who', 'or', 'same', 'his', 'having', 'shan', 'hers', \"it's\", 're', 'this', 'those', \"you're\", 'is', 'should', 'nor', 'yourself', 'what', 'then', 'itself', 'be', 'them', 'some', 'more', 'again', 'any']\n",
      "\n",
      " ************************************************************\n",
      "Stemmed word for 'tasty': tasti\n"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "# Initialize stopwords and customize the list\n",
    "stop_words = set(stopwords.words('english'))  # Create a set of stopwords from NLTK\n",
    "print(\"Original stopwords:\", stop_words)  # Display all stopwords in NLTK\n",
    "\n",
    "# List of stopwords to exclude\n",
    "excluding_stop = [\n",
    "    'against', 'not', 'don', \"don't\", 'ain', 'aren', \"aren't\", 'couldn', \"couldn't\", \n",
    "    'didn', \"didn't\", 'doesn', \"doesn't\", 'hadn', \"hadn't\", 'hasn', \"hasn't\", \n",
    "    'haven', \"haven't\", 'isn', \"isn't\", 'mightn', \"mightn't\", 'mustn', \"mustn't\", \n",
    "    'needn', \"needn't\", 'shouldn', \"shouldn't\", 'wasn', \"wasn't\", 'weren', \"weren't\", \n",
    "    'won', \"won't\", 'wouldn', \"wouldn't\"\n",
    "]\n",
    "\n",
    "# Remove excluded stopwords from the stop_words set\n",
    "stop_words = [word for word in stop_words if word not in excluding_stop]\n",
    "\n",
    "print(\"****\" * 15)\n",
    "print(\"Customized stopwords:\", stop_words)\n",
    "\n",
    "# Initialize the Snowball Stemmer\n",
    "snowball_stemmer = SnowballStemmer('english')\n",
    "print(\"\\n\", \"****\" * 15)\n",
    "print(\"Stemmed word for 'tasty':\", snowball_stemmer.stem('tasty'))  # Stemming example\n",
    "\n",
    "# Function to clean HTML tags from a sentence\n",
    "def clean_html(text):\n",
    "    \"\"\"\n",
    "    Remove HTML tags from the given text.\n",
    "    \n",
    "    :param text: The input string that may contain HTML tags.\n",
    "    :return: A string with HTML tags removed.\n",
    "    \"\"\"\n",
    "    cleanr = re.compile('<.*?>')\n",
    "    cleantext = re.sub(cleanr, ' ', text)\n",
    "    return cleantext\n",
    "\n",
    "# Function to clean punctuation or special characters from a sentence\n",
    "def clean_punctuation(text):\n",
    "    \"\"\"\n",
    "    Remove punctuation and special characters from the given text.\n",
    "    \n",
    "    :param text: The input string that may contain punctuation or special characters.\n",
    "    :return: A cleaned string without specified characters.\n",
    "    \"\"\"\n",
    "    cleaned = re.sub(r'[?|!|\\'|\"|#]', r'', text)\n",
    "    cleaned = re.sub(r'[.|,|)|(|\\|/]', r'', cleaned)\n",
    "    return cleaned\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-22T18:02:07.824006Z",
     "iopub.status.busy": "2021-03-22T18:02:07.822818Z",
     "iopub.status.idle": "2021-03-22T18:02:07.830658Z",
     "shell.execute_reply": "2021-03-22T18:02:07.830087Z"
    },
    "papermill": {
     "duration": 0.092111,
     "end_time": "2021-03-22T18:02:07.830834",
     "exception": false,
     "start_time": "2021-03-22T18:02:07.738723",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "I set aside at least an hour each day to read to my son (3 y/o). At this point, I consider myself a connoisseur of children's books and this is one of the best. Santa Clause put this under the tree. Since then, we've read it perpetually and he loves it.<br /><br />First, this book taught him the months of the year.<br /><br />Second, it's a pleasure to read. Well suited to 1.5 y/o old to 4+.<br /><br />Very few children's books are worth owning. Most should be borrowed from the library. This book, however, deserves a permanent spot on your shelf. Sendak's best.\n",
      "==================================================\n",
      "I was really looking forward to these pods based on the reviews.  Starbucks is good, but I prefer bolder taste.... imagine my surprise when I ordered 2 boxes - both were expired! One expired back in 2005 for gosh sakes.  I admit that Amazon agreed to credit me for cost plus part of shipping, but geez, 2 years expired!!!  I'm hoping to find local San Diego area shoppe that carries pods so that I can try something different than starbucks.\n",
      "==================================================\n",
      "Great ingredients although, chicken should have been 1st rather than chicken broth, the only thing I do not think belongs in it is Canola oil. Canola or rapeseed is not someting a dog would ever find in nature and if it did find rapeseed in nature and eat it, it would poison them. Today's Food industries have convinced the masses that Canola oil is a safe and even better oil than olive or virgin coconut, facts though say otherwise. Until the late 70's it was poisonous until they figured out a way to fix that. I still like it but it could be better.\n",
      "==================================================\n",
      "Can't do sugar.  Have tried scores of SF Syrups.  NONE of them can touch the excellence of this product.<br /><br />Thick, delicious.  Perfect.  3 ingredients: Water, Maltitol, Natural Maple Flavor.  PERIOD.  No chemicals.  No garbage.<br /><br />Have numerous friends & family members hooked on this stuff.  My husband & son, who do NOT like \"sugar free\" prefer this over major label regular syrup.<br /><br />I use this as my SWEETENER in baking: cheesecakes, white brownies, muffins, pumpkin pies, etc... Unbelievably delicious...<br /><br />Can you tell I like it? :)\n",
      "==================================================\n"
     ]
    }
   ],
   "source": [
    "# printing some random reviews\n",
    "sent_0 = final_data['Text'].values[6]\n",
    "print(sent_0)\n",
    "print(\"=\"*50)\n",
    "\n",
    "sent_1000 = final_data['Text'].values[1000]\n",
    "print(sent_1000)\n",
    "print(\"=\"*50)\n",
    "\n",
    "sent_1500 = final_data['Text'].values[1500]\n",
    "print(sent_1500)\n",
    "print(\"=\"*50)\n",
    "\n",
    "sent_4900 = final_data['Text'].values[4900]\n",
    "print(sent_4900)\n",
    "print(\"=\"*50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-22T18:02:07.984780Z",
     "iopub.status.busy": "2021-03-22T18:02:07.984011Z",
     "iopub.status.idle": "2021-03-22T18:02:07.988480Z",
     "shell.execute_reply": "2021-03-22T18:02:07.989216Z"
    },
    "papermill": {
     "duration": 0.084982,
     "end_time": "2021-03-22T18:02:07.989372",
     "exception": false,
     "start_time": "2021-03-22T18:02:07.904390",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "I set aside at least an hour each day to read to my son (3 y/o). At this point, I consider myself a connoisseur of children's books and this is one of the best. Santa Clause put this under the tree. Since then, we've read it perpetually and he loves it.<br /><br />First, this book taught him the months of the year.<br /><br />Second, it's a pleasure to read. Well suited to 1.5 y/o old to 4+.<br /><br />Very few children's books are worth owning. Most should be borrowed from the library. This book, however, deserves a permanent spot on your shelf. Sendak's best.\n"
     ]
    }
   ],
   "source": [
    "sent_0=re.sub(r'https\\S+','',sent_0)\n",
    "sent_1000=re.sub(r'https\\S+','',sent_1000)\n",
    "sent_1500=re.sub(r'https\\S+','',sent_1500)\n",
    "sent_4900=re.sub(r'http\\S+', '', sent_4900)\n",
    "\n",
    "print(sent_0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-22T18:02:08.163974Z",
     "iopub.status.busy": "2021-03-22T18:02:08.143039Z",
     "iopub.status.idle": "2021-03-22T18:02:18.409729Z",
     "shell.execute_reply": "2021-03-22T18:02:18.407818Z"
    },
    "papermill": {
     "duration": 10.346011,
     "end_time": "2021-03-22T18:02:18.409916",
     "exception": false,
     "start_time": "2021-03-22T18:02:08.063905",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: beautifulsoup4 in /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages (4.12.2)\n",
      "Requirement already satisfied: soupsieve>1.2 in /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages (from beautifulsoup4) (2.5)\n",
      "\u001b[33mWARNING: You are using pip version 21.1.1; however, version 24.2 is available.\n",
      "You should consider upgrading via the '/Library/Frameworks/Python.framework/Versions/3.8/bin/python3.8 -m pip install --upgrade pip' command.\u001b[0m\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install beautifulsoup4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-22T18:02:18.586035Z",
     "iopub.status.busy": "2021-03-22T18:02:18.574593Z",
     "iopub.status.idle": "2021-03-22T18:02:25.718635Z",
     "shell.execute_reply": "2021-03-22T18:02:25.719449Z"
    },
    "papermill": {
     "duration": 7.229734,
     "end_time": "2021-03-22T18:02:25.719723",
     "exception": false,
     "start_time": "2021-03-22T18:02:18.489989",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: lxml in /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages (5.3.0)\n",
      "\u001b[33mWARNING: You are using pip version 21.1.1; however, version 24.2 is available.\n",
      "You should consider upgrading via the '/Library/Frameworks/Python.framework/Versions/3.8/bin/python3.8 -m pip install --upgrade pip' command.\u001b[0m\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install lxml"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-22T18:02:25.889886Z",
     "iopub.status.busy": "2021-03-22T18:02:25.888881Z",
     "iopub.status.idle": "2021-03-22T18:02:26.066863Z",
     "shell.execute_reply": "2021-03-22T18:02:26.067684Z"
    },
    "papermill": {
     "duration": 0.266598,
     "end_time": "2021-03-22T18:02:26.068049",
     "exception": false,
     "start_time": "2021-03-22T18:02:25.801451",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def decontracted(phrase):\n",
    "    phrase=re.sub(r\"won't\",'will not',phrase)\n",
    "    phrase=re.sub(r\"can\\'t\",'can not',phrase)\n",
    "    phrase=re.sub(r\"n\\'t\",'not',phrase)\n",
    "    phrase=re.sub(r\"\\'re\",'are',phrase)\n",
    "    phrase = re.sub(r\"\\'s\", \" is\", phrase)\n",
    "    phrase = re.sub(r\"\\'d\", \" would\", phrase)\n",
    "    phrase = re.sub(r\"\\'ll\", \" will\", phrase)\n",
    "    phrase = re.sub(r\"\\'t\", \" not\", phrase)\n",
    "    phrase = re.sub(r\"\\'ve\", \" have\", phrase)\n",
    "    phrase = re.sub(r\"\\'m\", \" am\", phrase)\n",
    "    return phrase"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-22T18:02:26.238999Z",
     "iopub.status.busy": "2021-03-22T18:02:26.238092Z",
     "iopub.status.idle": "2021-03-22T18:02:26.241803Z",
     "shell.execute_reply": "2021-03-22T18:02:26.242406Z"
    },
    "papermill": {
     "duration": 0.091634,
     "end_time": "2021-03-22T18:02:26.242553",
     "exception": false,
     "start_time": "2021-03-22T18:02:26.150919",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "I set aside at least an hour each day to read to my son (3 y/o). At this point, I consider myself a connoisseur of children's books and this is one of the best. Santa Clause put this under the tree. Since then, we've read it perpetually and he loves it.<br /><br />First, this book taught him the months of the year.<br /><br />Second, it's a pleasure to read. Well suited to 1.5 y/o old to 4+.<br /><br />Very few children's books are worth owning. Most should be borrowed from the library. This book, however, deserves a permanent spot on your shelf. Sendak's best.\n",
      "==================================================\n",
      "Great ingredients although chicken should have been 1st rather than chicken broth the only thing I do not think belongs in it is Canola oil Canola or rapeseed is not someting a dog would ever find in nature and if it did find rapeseed in nature and eat it it would poison them Today s Food industries have convinced the masses that Canola oil is a safe and even better oil than olive or virgin coconut facts though say otherwise Until the late 70 s it was poisonous until they figured out a way to fix that I still like it but it could be better \n"
     ]
    }
   ],
   "source": [
    "sent_0=re.sub(\"\\S\\d\\S\",\"\",sent_0).strip()\n",
    "print(sent_0)\n",
    "print(\"=\"*50)\n",
    "\n",
    "sent_1500=re.sub('[^A-Za-z0-9]+',' ',sent_1500)\n",
    "print(sent_1500)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-22T18:02:26.411304Z",
     "iopub.status.busy": "2021-03-22T18:02:26.410105Z",
     "iopub.status.idle": "2021-03-22T18:02:26.416460Z",
     "shell.execute_reply": "2021-03-22T18:02:26.415582Z"
    },
    "papermill": {
     "duration": 0.093295,
     "end_time": "2021-03-22T18:02:26.416657",
     "exception": false,
     "start_time": "2021-03-22T18:02:26.323362",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Error loading stopwords: <urlopen error [SSL:\n",
      "[nltk_data]     CERTIFICATE_VERIFY_FAILED] certificate verify failed:\n",
      "[nltk_data]     unable to get local issuer certificate (_ssl.c:1131)>\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Pandas Apply: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 364171/364171 [04:42<00:00, 1288.69it/s]\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Download the stopwords if you haven't already\n",
    "nltk.download('stopwords')\n",
    "\n",
    "# Define the stopwords list\n",
    "stop = set(stopwords.words('english'))\n",
    "\n",
    "# Assuming the decontracted function is already defined\n",
    "\n",
    "def preprocess_sentence(sentence):\n",
    "    \"\"\"\n",
    "    Preprocesses a given sentence by performing the following steps:\n",
    "    1. Remove URLs.\n",
    "    2. Remove HTML tags.\n",
    "    3. Expand contractions.\n",
    "    4. Remove words containing digits.\n",
    "    5. Remove special characters.\n",
    "    6. Convert to lowercase and remove stopwords.\n",
    "    \"\"\"\n",
    "\n",
    "    # Remove URLs\n",
    "    sentence = re.sub(r\"http\\S+\", \"\", sentence)\n",
    "    \n",
    "    # Remove HTML tags\n",
    "    sentence = BeautifulSoup(sentence, 'lxml').get_text()\n",
    "    \n",
    "    # Expand contractions\n",
    "    sentence = decontracted(sentence)\n",
    "    \n",
    "    # Remove words containing digits\n",
    "    sentence = re.sub(r\"\\S*\\d\\S*\", \"\", sentence).strip()\n",
    "    \n",
    "    # Remove special characters, keeping only letters\n",
    "    sentence = re.sub(r'[^A-Za-z]+', ' ', sentence)\n",
    "    \n",
    "    # Convert to lowercase, remove stopwords, and return the cleaned sentence\n",
    "    sentence = ' '.join(word.lower() for word in sentence.split() if word.lower() not in stop)\n",
    "    \n",
    "    return sentence.strip()\n",
    "\n",
    "# Apply the preprocessing function to the 'Text' column using swifter for faster processing\n",
    "final_data['Cleaned_Text'] = final_data['Text'].swifter.apply(preprocess_sentence)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-22T18:06:40.098326Z",
     "iopub.status.busy": "2021-03-22T18:06:40.097140Z",
     "iopub.status.idle": "2021-03-22T18:09:10.795063Z",
     "shell.execute_reply": "2021-03-22T18:09:10.794319Z"
    },
    "papermill": {
     "duration": 151.552243,
     "end_time": "2021-03-22T18:09:10.795264",
     "exception": false,
     "start_time": "2021-03-22T18:06:39.243021",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Pandas Apply: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 364171/364171 [02:22<00:00, 2554.17it/s]\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Apply the preprocessing function to the 'Summary' column using swifter for faster processing\n",
    "final_data['Cleaned_Summary'] = final_data['Summary'].swifter.apply(preprocess_sentence)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-22T18:09:13.552996Z",
     "iopub.status.busy": "2021-03-22T18:09:13.551676Z",
     "iopub.status.idle": "2021-03-22T18:09:23.591152Z",
     "shell.execute_reply": "2021-03-22T18:09:23.589901Z"
    },
    "papermill": {
     "duration": 11.419497,
     "end_time": "2021-03-22T18:09:23.591372",
     "exception": false,
     "start_time": "2021-03-22T18:09:12.171875",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: bs4 in /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages (0.0.2)\n",
      "Requirement already satisfied: beautifulsoup4 in /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages (from bs4) (4.12.2)\n",
      "Requirement already satisfied: soupsieve>1.2 in /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages (from beautifulsoup4->bs4) (2.5)\n",
      "\u001b[33mWARNING: You are using pip version 21.1.1; however, version 24.2 is available.\n",
      "You should consider upgrading via the '/Library/Frameworks/Python.framework/Versions/3.8/bin/python3.8 -m pip install --upgrade pip' command.\u001b[0m\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install bs4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-22T18:09:26.783819Z",
     "iopub.status.busy": "2021-03-22T18:09:26.783133Z",
     "iopub.status.idle": "2021-03-22T18:09:26.807102Z",
     "shell.execute_reply": "2021-03-22T18:09:26.808586Z"
    },
    "papermill": {
     "duration": 1.840031,
     "end_time": "2021-03-22T18:09:26.808868",
     "exception": false,
     "start_time": "2021-03-22T18:09:24.968837",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0) >> this witty little book makes my son laugh at loud. i recite it in the car as we're driving along and he always can sing the refrain. he's learned about whales, India, drooping roses:  i love all the new words this book  introduces and the silliness of it all.  this is a classic book i am  willing to bet my son will STILL be able to recite from memory when he is  in college\n",
      "--------------------------------------------------\n",
      "1) >> I grew up reading these Sendak books, and watching the Really Rosie movie that incorporates them, and love them. My son loves them too. I do however, miss the hard cover version. The paperbacks seem kind of flimsy and it takes two hands to keep the pages open.\n",
      "--------------------------------------------------\n",
      "2) >> This is a fun way for children to learn their months of the year!  We will learn all of the poems throughout the school year.  they like the handmotions which I invent for each poem.\n",
      "--------------------------------------------------\n",
      "3) >> This is a great little book to read aloud- it has a nice rhythm as well as good repetition that little ones like, in the lines about \"chicken soup with rice\".  The child gets to go through the months of the year and go to wonderful places like Bombay and down the Nile, all the while, eating, well, you know what they get to eat.  Some kids will have Maurice Sendak's version of ice skating or how to treat roses in their heads for a long time and they won't even know where it came from.  Surprise!  It came from this little witty book.  :-)\n",
      "--------------------------------------------------\n",
      "4) >> This is a book of poetry about the months of the year.  It goes through each month and has a cute little poem to go along with it.  I love this book because it is a really fun way to learn the months and the poems are very creative. The author's purpose for writing this book was to give children a fun way to learn the months.  The children can also learn things about poetry and rhythm through reading this book.\n",
      "--------------------------------------------------\n",
      "5) >> A charming, rhyming book that describes the circumstances under which you eat (or don't) chicken soup with rice, month-by-month. This sounds like the kind of thing kids would make up while they're out of recess and sing over and over until they drive the teachers crazy. It's cute and catchy and sounds really childlike but is skillfully written.\n",
      "--------------------------------------------------\n",
      "\n",
      "==================================================\n",
      "First sentence containing HTML tags found at index 6:\n",
      "6) >> I set aside at least an hour each day to read to my son (3 y/o). At this point, I consider myself a connoisseur of children's books and this is one of the best. Santa Clause put this under the tree. Since then, we've read it perpetually and he loves it.<br /><br />First, this book taught him the months of the year.<br /><br />Second, it's a pleasure to read. Well suited to 1.5 y/o old to 4+.<br /><br />Very few children's books are worth owning. Most should be borrowed from the library. This book, however, deserves a permanent spot on your shelf. Sendak's best.\n",
      "==================================================\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# #SENTENCES Containing HTML tags\n",
    "# i=0;\n",
    "# for sentence in final_data['Text'].values:\n",
    "#     if (len(re.findall('<.*?>',sentence))):\n",
    "#         break;\n",
    "#     print(\"=\"*50)\n",
    "#     print(i,\")>>\",sentence)\n",
    "#     i=i+1\n",
    "# print(\"=\"*50)\n",
    "\n",
    "# Enhanced code to identify sentences containing HTML tags\n",
    "\n",
    "# for i, sentence in enumerate(final_data['Text'].values):\n",
    "#     # Check if the sentence contains any HTML tags\n",
    "#     if re.search('<.*?>', sentence):\n",
    "#         print(f\"\\n{'='*50}\")\n",
    "#         print(f\"First sentence containing HTML tags found at index {i}:\")\n",
    "#         print(f\"{i}) >> {sentence}\")\n",
    "#         print(f\"{'='*50}\\n\")\n",
    "#         break\n",
    "#     else:\n",
    "#         print(f\"{i}) >> {sentence}\")\n",
    "#         print(f\"{'-'*50}\")\n",
    "\n",
    "# # Final message if no HTML tags are found\n",
    "# if not re.search('<.*?>', sentence):\n",
    "#     print(\"No sentences containing HTML tags were found in the dataset.\")\n",
    "\n",
    "\n",
    "# Iterate over sentences and check for HTML tags using BeautifulSoup\n",
    "for i, sentence in enumerate(final_data['Text'].values):\n",
    "    # Parse the sentence with BeautifulSoup\n",
    "    soup = BeautifulSoup(sentence, \"html.parser\")\n",
    "    \n",
    "    # Check if BeautifulSoup parsed any tags\n",
    "    if soup.find():\n",
    "        print(f\"\\n{'='*50}\")\n",
    "        print(f\"First sentence containing HTML tags found at index {i}:\")\n",
    "        print(f\"{i}) >> {sentence}\")\n",
    "        print(f\"{'='*50}\\n\")\n",
    "        break\n",
    "    else:\n",
    "        print(f\"{i}) >> {sentence}\")\n",
    "        print(f\"{'-'*50}\")\n",
    "\n",
    "# Final message if no HTML tags are found\n",
    "if not soup.find():\n",
    "    print(\"No sentences containing HTML tags were found in the dataset.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-22T18:09:39.268976Z",
     "iopub.status.busy": "2021-03-22T18:09:39.267664Z",
     "iopub.status.idle": "2021-03-22T18:09:39.303188Z",
     "shell.execute_reply": "2021-03-22T18:09:39.302647Z"
    },
    "papermill": {
     "duration": 1.592159,
     "end_time": "2021-03-22T18:09:39.303369",
     "exception": false,
     "start_time": "2021-03-22T18:09:37.711210",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>ProductId</th>\n",
       "      <th>UserId</th>\n",
       "      <th>ProfileName</th>\n",
       "      <th>HelpfulnessNumerator</th>\n",
       "      <th>HelpfulnessDenominator</th>\n",
       "      <th>Score</th>\n",
       "      <th>Time</th>\n",
       "      <th>Summary</th>\n",
       "      <th>Text</th>\n",
       "      <th>Cleaned_Text</th>\n",
       "      <th>Cleaned_Summary</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>138706</th>\n",
       "      <td>150524</td>\n",
       "      <td>0006641040</td>\n",
       "      <td>ACITT7DI6IDDL</td>\n",
       "      <td>shari zychinski</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1999-10-08</td>\n",
       "      <td>EVERY book is educational</td>\n",
       "      <td>this witty little book makes my son laugh at l...</td>\n",
       "      <td>witty little book makes son laugh loud recite ...</td>\n",
       "      <td>every book educational</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>138688</th>\n",
       "      <td>150506</td>\n",
       "      <td>0006641040</td>\n",
       "      <td>A2IW4PEEKO2R0U</td>\n",
       "      <td>Tracy</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2007-11-11</td>\n",
       "      <td>Love the book, miss the hard cover version</td>\n",
       "      <td>I grew up reading these Sendak books, and watc...</td>\n",
       "      <td>grew reading sendak books watching really rosi...</td>\n",
       "      <td>love book miss hard cover version</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>138689</th>\n",
       "      <td>150507</td>\n",
       "      <td>0006641040</td>\n",
       "      <td>A1S4A3IQ2MU7V4</td>\n",
       "      <td>sally sue \"sally sue\"</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2007-10-04</td>\n",
       "      <td>chicken soup with rice months</td>\n",
       "      <td>This is a fun way for children to learn their ...</td>\n",
       "      <td>fun way children learn months year learn poems...</td>\n",
       "      <td>chicken soup rice months</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>138690</th>\n",
       "      <td>150508</td>\n",
       "      <td>0006641040</td>\n",
       "      <td>AZGXZ2UUK6X</td>\n",
       "      <td>Catherine Hallberg \"(Kate)\"</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2004-02-06</td>\n",
       "      <td>a good swingy rhythm for reading aloud</td>\n",
       "      <td>This is a great little book to read aloud- it ...</td>\n",
       "      <td>great little book read aloud nice rhythm well ...</td>\n",
       "      <td>good swingy rhythm reading aloud</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>138691</th>\n",
       "      <td>150509</td>\n",
       "      <td>0006641040</td>\n",
       "      <td>A3CMRKGE0P909G</td>\n",
       "      <td>Teresa</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>2002-04-10</td>\n",
       "      <td>A great way to learn the months</td>\n",
       "      <td>This is a book of poetry about the months of t...</td>\n",
       "      <td>book poetry months year goes month cute little...</td>\n",
       "      <td>great way learn months</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Id   ProductId          UserId                  ProfileName  \\\n",
       "138706  150524  0006641040   ACITT7DI6IDDL              shari zychinski   \n",
       "138688  150506  0006641040  A2IW4PEEKO2R0U                        Tracy   \n",
       "138689  150507  0006641040  A1S4A3IQ2MU7V4        sally sue \"sally sue\"   \n",
       "138690  150508  0006641040     AZGXZ2UUK6X  Catherine Hallberg \"(Kate)\"   \n",
       "138691  150509  0006641040  A3CMRKGE0P909G                       Teresa   \n",
       "\n",
       "        HelpfulnessNumerator  HelpfulnessDenominator  Score       Time  \\\n",
       "138706                     0                       0      1 1999-10-08   \n",
       "138688                     1                       1      1 2007-11-11   \n",
       "138689                     1                       1      1 2007-10-04   \n",
       "138690                     1                       1      1 2004-02-06   \n",
       "138691                     3                       4      1 2002-04-10   \n",
       "\n",
       "                                           Summary  \\\n",
       "138706                   EVERY book is educational   \n",
       "138688  Love the book, miss the hard cover version   \n",
       "138689               chicken soup with rice months   \n",
       "138690      a good swingy rhythm for reading aloud   \n",
       "138691             A great way to learn the months   \n",
       "\n",
       "                                                     Text  \\\n",
       "138706  this witty little book makes my son laugh at l...   \n",
       "138688  I grew up reading these Sendak books, and watc...   \n",
       "138689  This is a fun way for children to learn their ...   \n",
       "138690  This is a great little book to read aloud- it ...   \n",
       "138691  This is a book of poetry about the months of t...   \n",
       "\n",
       "                                             Cleaned_Text  \\\n",
       "138706  witty little book makes son laugh loud recite ...   \n",
       "138688  grew reading sendak books watching really rosi...   \n",
       "138689  fun way children learn months year learn poems...   \n",
       "138690  great little book read aloud nice rhythm well ...   \n",
       "138691  book poetry months year goes month cute little...   \n",
       "\n",
       "                          Cleaned_Summary  \n",
       "138706             every book educational  \n",
       "138688  love book miss hard cover version  \n",
       "138689           chicken soup rice months  \n",
       "138690   good swingy rhythm reading aloud  \n",
       "138691             great way learn months  "
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# converting time in unit=sec\n",
    "final_data['Time']=pd.to_datetime(final_data['Time'],unit='s')\n",
    "final_data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 1.372209,
     "end_time": "2021-03-22T18:09:42.041062",
     "exception": false,
     "start_time": "2021-03-22T18:09:40.668853",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Sorting dataset based on 'Time' feature"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-22T18:09:44.728867Z",
     "iopub.status.busy": "2021-03-22T18:09:44.727618Z",
     "iopub.status.idle": "2021-03-22T18:09:45.439207Z",
     "shell.execute_reply": "2021-03-22T18:09:45.438534Z"
    },
    "papermill": {
     "duration": 2.061153,
     "end_time": "2021-03-22T18:09:45.439356",
     "exception": false,
     "start_time": "2021-03-22T18:09:43.378203",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>ProductId</th>\n",
       "      <th>UserId</th>\n",
       "      <th>ProfileName</th>\n",
       "      <th>HelpfulnessNumerator</th>\n",
       "      <th>HelpfulnessDenominator</th>\n",
       "      <th>Score</th>\n",
       "      <th>Time</th>\n",
       "      <th>Summary</th>\n",
       "      <th>Text</th>\n",
       "      <th>Cleaned_Text</th>\n",
       "      <th>Cleaned_Summary</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>138706</th>\n",
       "      <td>150524</td>\n",
       "      <td>0006641040</td>\n",
       "      <td>ACITT7DI6IDDL</td>\n",
       "      <td>shari zychinski</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1999-10-08</td>\n",
       "      <td>EVERY book is educational</td>\n",
       "      <td>this witty little book makes my son laugh at l...</td>\n",
       "      <td>witty little book makes son laugh loud recite ...</td>\n",
       "      <td>every book educational</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>138683</th>\n",
       "      <td>150501</td>\n",
       "      <td>0006641040</td>\n",
       "      <td>AJ46FKXOVC7NR</td>\n",
       "      <td>Nicholas A Mesiano</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1999-10-25</td>\n",
       "      <td>This whole series is great way to spend time w...</td>\n",
       "      <td>I can remember seeing the show when it aired o...</td>\n",
       "      <td>remember seeing show aired television years ag...</td>\n",
       "      <td>whole series great way spend time child</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>417839</th>\n",
       "      <td>451856</td>\n",
       "      <td>B00004CXX9</td>\n",
       "      <td>AIUWLEQ1ADEG5</td>\n",
       "      <td>Elizabeth Medina</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1999-12-02</td>\n",
       "      <td>Entertainingl Funny!</td>\n",
       "      <td>Beetlejuice is a well written movie ..... ever...</td>\n",
       "      <td>beetlejuice well written movie everything exce...</td>\n",
       "      <td>entertainingl funny</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>346055</th>\n",
       "      <td>374359</td>\n",
       "      <td>B00004CI84</td>\n",
       "      <td>A344SMIA5JECGM</td>\n",
       "      <td>Vincent P. Ross</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1999-12-06</td>\n",
       "      <td>A modern day fairy tale</td>\n",
       "      <td>A twist of rumplestiskin captured on film, sta...</td>\n",
       "      <td>twist rumplestiskin captured film starring mic...</td>\n",
       "      <td>modern day fairy tale</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>417838</th>\n",
       "      <td>451855</td>\n",
       "      <td>B00004CXX9</td>\n",
       "      <td>AJH6LUC1UT1ON</td>\n",
       "      <td>The Phantom of the Opera</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2000-01-03</td>\n",
       "      <td>FANTASTIC!</td>\n",
       "      <td>Beetlejuice is an excellent and funny movie. K...</td>\n",
       "      <td>beetlejuice excellent funny movie keaton hilar...</td>\n",
       "      <td>fantastic</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Id   ProductId          UserId               ProfileName  \\\n",
       "138706  150524  0006641040   ACITT7DI6IDDL           shari zychinski   \n",
       "138683  150501  0006641040   AJ46FKXOVC7NR        Nicholas A Mesiano   \n",
       "417839  451856  B00004CXX9   AIUWLEQ1ADEG5          Elizabeth Medina   \n",
       "346055  374359  B00004CI84  A344SMIA5JECGM           Vincent P. Ross   \n",
       "417838  451855  B00004CXX9   AJH6LUC1UT1ON  The Phantom of the Opera   \n",
       "\n",
       "        HelpfulnessNumerator  HelpfulnessDenominator  Score       Time  \\\n",
       "138706                     0                       0      1 1999-10-08   \n",
       "138683                     2                       2      1 1999-10-25   \n",
       "417839                     0                       0      1 1999-12-02   \n",
       "346055                     1                       2      1 1999-12-06   \n",
       "417838                     0                       0      1 2000-01-03   \n",
       "\n",
       "                                                  Summary  \\\n",
       "138706                          EVERY book is educational   \n",
       "138683  This whole series is great way to spend time w...   \n",
       "417839                               Entertainingl Funny!   \n",
       "346055                            A modern day fairy tale   \n",
       "417838                                         FANTASTIC!   \n",
       "\n",
       "                                                     Text  \\\n",
       "138706  this witty little book makes my son laugh at l...   \n",
       "138683  I can remember seeing the show when it aired o...   \n",
       "417839  Beetlejuice is a well written movie ..... ever...   \n",
       "346055  A twist of rumplestiskin captured on film, sta...   \n",
       "417838  Beetlejuice is an excellent and funny movie. K...   \n",
       "\n",
       "                                             Cleaned_Text  \\\n",
       "138706  witty little book makes son laugh loud recite ...   \n",
       "138683  remember seeing show aired television years ag...   \n",
       "417839  beetlejuice well written movie everything exce...   \n",
       "346055  twist rumplestiskin captured film starring mic...   \n",
       "417838  beetlejuice excellent funny movie keaton hilar...   \n",
       "\n",
       "                                Cleaned_Summary  \n",
       "138706                   every book educational  \n",
       "138683  whole series great way spend time child  \n",
       "417839                      entertainingl funny  \n",
       "346055                    modern day fairy tale  \n",
       "417838                                fantastic  "
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_data=final_data.sort_values('Time',axis=0, ascending=True, inplace=False, kind='quicksort', na_position='last')\n",
    "final_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-22T18:09:48.434058Z",
     "iopub.status.busy": "2021-03-22T18:09:48.432847Z",
     "iopub.status.idle": "2021-03-22T18:09:57.222255Z",
     "shell.execute_reply": "2021-03-22T18:09:57.220389Z"
    },
    "papermill": {
     "duration": 10.423812,
     "end_time": "2021-03-22T18:09:57.222430",
     "exception": false,
     "start_time": "2021-03-22T18:09:46.798618",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Store the final table into an SQLITE table for future\n",
    "connection=sqlite3.connect('final12.sqlite')\n",
    "c=connection.cursor\n",
    "connection.text_factory=str\n",
    "final_data.to_sql('Reviews',connection,schema=None,if_exists='replace',index=True,index_label=True,chunksize=None,dtype=None)\n",
    "connection.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 1.998502,
     "end_time": "2021-03-22T18:10:00.593594",
     "exception": false,
     "start_time": "2021-03-22T18:09:58.595092",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<!-- Header -->\n",
    "<h1 style=\"font-family: 'Arial', sans-serif; font-size: 32px; font-weight: bold; margin-top: 30px; margin-bottom: 20px; color: #E0FFFF;\">Logistic Regression Implementation for Text Data</h1>\n",
    "\n",
    "<!-- Subheader -->\n",
    "<h2 style=\"font-family: 'Arial', sans-serif; font-size: 28px; font-weight: bold; margin-top: 25px; margin-bottom: 15px; color: #E0FFFF;\">Step 1: Feature Transformation with Logistic Regression</h2>\n",
    "\n",
    "<!-- Content -->\n",
    "<p style=\"font-family: 'Georgia', serif; font-size: 18px; margin-bottom: 20px; color: white;\">\n",
    "    Apply Logistic Regression on various transformed feature sets:\n",
    "</p>\n",
    "\n",
    "<ul style=\"font-family: 'Georgia', serif; font-size: 18px; margin-bottom: 10px; margin-left: 20px; color: white;\">\n",
    "    <li>Review text vectorized using Bag of Words (BOW).</li>\n",
    "    <li>Review text vectorized using Term Frequency-Inverse Document Frequency (TFIDF).</li>\n",
    "    <li>Review text vectorized using Average Word2Vec (AVG W2v).</li>\n",
    "    <li>Review text vectorized using TFIDF-weighted Word2Vec (TFIDF W2v).</li>\n",
    "</ul>\n",
    "\n",
    "<!-- Subheader -->\n",
    "<h2 style=\"font-family: 'Arial', sans-serif; font-size: 28px; font-weight: bold; margin-top: 25px; margin-bottom: 15px; color: #E0FFFF;\">Step 2: Hyperparameter Optimization</h2>\n",
    "\n",
    "<!-- Content -->\n",
    "<p style=\"font-family: 'Georgia', serif; font-size: 18px; margin-bottom: 20px; color: white;\">\n",
    "    Optimize hyperparameters to achieve the highest AUC score:\n",
    "</p>\n",
    "\n",
    "<ul style=\"font-family: 'Georgia', serif; font-size: 18px; margin-bottom: 10px; margin-left: 20px; color: white;\">\n",
    "    <li>Use techniques like k-fold cross-validation or simple cross-validation to identify the best hyperparameters.</li>\n",
    "    <li>Implement GridSearchCV, RandomSearchCV, or custom loops for hyperparameter tuning.</li>\n",
    "</ul>\n",
    "\n",
    "<!-- Subheader -->\n",
    "<h2 style=\"font-family: 'Arial', sans-serif; font-size: 28px; font-weight: bold; margin-top: 25px; margin-bottom: 15px; color: #E0FFFF;\">Step 3: Perturbation Analysis</h2>\n",
    "\n",
    "<!-- Content -->\n",
    "<p style=\"font-family: 'Georgia', serif; font-size: 18px; margin-bottom: 20px; color: white;\">\n",
    "    Conduct a perturbation test to assess model stability:\n",
    "</p>\n",
    "\n",
    "<ul style=\"font-family: 'Georgia', serif; font-size: 18px; margin-bottom: 10px; margin-left: 20px; color: white;\">\n",
    "    <li>Obtain weight vector <em>W</em> after fitting the model on dataset <em>X</em>.</li>\n",
    "    <li>Introduce noise to <em>X</em> to generate <em>X' = X + e</em> and refit the model to obtain <em>W'</em>.</li>\n",
    "    <li>Adjust <em>W</em> and <em>W'</em> by adding a small epsilon value to avoid division errors.</li>\n",
    "    <li>Calculate the percentage change between <em>W</em> and <em>W'</em>, and analyze percentile changes.</li>\n",
    "    <li>Identify and report feature names with percentage changes exceeding a specified threshold.</li>\n",
    "</ul>\n",
    "\n",
    "<!-- Subheader -->\n",
    "<h2 style=\"font-family: 'Arial', sans-serif; font-size: 28px; font-weight: bold; margin-top: 25px; margin-bottom: 15px; color: #E0FFFF;\">Step 4: Assessing Sparsity</h2>\n",
    "\n",
    "<!-- Content -->\n",
    "<p style=\"font-family: 'Georgia', serif; font-size: 18px; margin-bottom: 20px; color: white;\">\n",
    "    Calculate sparsity of the weight vector after applying L1 regularization.\n",
    "</p>\n",
    "\n",
    "<!-- Subheader -->\n",
    "<h2 style=\"font-family: 'Arial', sans-serif; font-size: 28px; font-weight: bold; margin-top: 25px; margin-bottom: 15px; color: #E0FFFF;\">Step 5: Feature Importance Ranking</h2>\n",
    "\n",
    "<!-- Content -->\n",
    "<p style=\"font-family: 'Georgia', serif; font-size: 18px; margin-bottom: 20px; color: white;\">\n",
    "    Identify and report the top 10 most important features for both positive and negative classes.\n",
    "</p>\n",
    "\n",
    "<!-- Subheader -->\n",
    "<h2 style=\"font-family: 'Arial', sans-serif; font-size: 28px; font-weight: bold; margin-top: 25px; margin-bottom: 15px; color: #E0FFFF;\">Step 6: Feature Engineering</h2>\n",
    "\n",
    "<!-- Content -->\n",
    "<p style=\"font-family: 'Georgia', serif; font-size: 18px; margin-bottom: 20px; color: white;\">\n",
    "    Enhance model performance by incorporating additional features:\n",
    "</p>\n",
    "\n",
    "<ul style=\"font-family: 'Georgia', serif; font-size: 18px; margin-bottom: 10px; margin-left: 20px; color: white;\">\n",
    "    <li>Include review length as an additional feature.</li>\n",
    "    <li>Extract features from the review summary.</li>\n",
    "</ul>\n",
    "\n",
    "<!-- Subheader -->\n",
    "<h2 style=\"font-family: 'Arial', sans-serif; font-size: 28px; font-weight: bold; margin-top: 25px; margin-bottom: 15px; color: #E0FFFF;\">Step 7: Performance Visualization</h2>\n",
    "\n",
    "<!-- Content -->\n",
    "<p style=\"font-family: 'Georgia', serif; font-size: 18px; margin-bottom: 20px; color: white;\">\n",
    "    Visualize model performance:\n",
    "</p>\n",
    "\n",
    "<ul style=\"font-family: 'Georgia', serif; font-size: 18px; margin-bottom: 10px; margin-left: 20px; color: white;\">\n",
    "    <li>Plot model performance on training and cross-validation data for each hyperparameter.</li>\n",
    "    <li>After selecting the best hyperparameter, train the model, evaluate AUC on test data, and plot ROC curves for both train and test sets.</li>\n",
    "    <li>Visualize confusion matrices using seaborn heatmaps.</li>\n",
    "</ul>\n",
    "\n",
    "<!-- Subheader -->\n",
    "<h2 style=\"font-family: 'Arial', sans-serif; font-size: 28px; font-weight: bold; margin-top: 25px; margin-bottom: 15px; color: #E0FFFF;\">Step 8: Results Summary</h2>\n",
    "\n",
    "<!-- Content -->\n",
    "<p style=\"font-family: 'Georgia', serif; font-size: 18px; margin-bottom: 20px; color: white;\">\n",
    "    Summarize and present results in a tabular format using libraries like PrettyTable.\n",
    "</p>\n",
    "\n",
    "<!-- Subheader -->\n",
    "<h2 style=\"font-family: 'Arial', sans-serif; font-size: 28px; font-weight: bold; margin-top: 25px; margin-bottom: 15px; color: #E0FFFF;\">Additional Considerations</h2>\n",
    "\n",
    "<!-- Content -->\n",
    "<p style=\"font-family: 'Georgia', serif; font-size: 18px; margin-bottom: 20px; color: white;\">\n",
    "    Address potential data leakage:\n",
    "</p>\n",
    "\n",
    "<ul style=\"font-family: 'Georgia', serif; font-size: 18px; margin-bottom: 10px; margin-left: 20px; color: white;\">\n",
    "    <li>Split the dataset into train/validation/test sets before vectorization.</li>\n",
    "    <li>Apply <code>fit_transform()</code> on training data and <code>transform()</code> on validation/test data during vectorization.</li>\n",
    "</ul>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Equalizing Class Distribution is Important:\n",
    "Avoiding Model Bias:\n",
    "\n",
    "If the model is trained on an imbalanced dataset, it might learn to always predict the majority class because doing so minimizes the overall error. This leads to a model that performs well on the majority class but poorly on the minority class.\n",
    "By sampling an equal number of positive and negative examples, the model is forced to learn patterns in both classes, leading to a more balanced and fair model.\n",
    "Improved Evaluation Metrics:\n",
    "\n",
    "Evaluation metrics like accuracy can be misleading in the presence of class imbalance. For example, if 90% of the data is positive, a model that always predicts \"positive\" will have 90% accuracy, but it would be completely useless for identifying negative samples.\n",
    "Equalizing the number of samples helps in getting more meaningful evaluation metrics, such as precision, recall, and F1-score, which provide a better understanding of the model's performance across both classes.\n",
    "Better Generalization:\n",
    "\n",
    "A model trained on a balanced dataset is more likely to generalize well to new, unseen data. If the test or real-world data has a different distribution (e.g., more negatives), a model trained on balanced data is better equipped to handle this.\n",
    "Preventing Overfitting:\n",
    "\n",
    "In some cases, an imbalanced dataset can cause the model to overfit to the majority class because it sees much more data from that class during training. By balancing the classes, the model has to learn from a more diverse set of examples, reducing the risk of overfitting.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-22T18:10:03.345182Z",
     "iopub.status.busy": "2021-03-22T18:10:03.344025Z",
     "iopub.status.idle": "2021-03-22T18:10:03.733871Z",
     "shell.execute_reply": "2021-03-22T18:10:03.734435Z"
    },
    "papermill": {
     "duration": 1.75451,
     "end_time": "2021-03-22T18:10:03.734614",
     "exception": false,
     "start_time": "2021-03-22T18:10:01.980104",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>ProductId</th>\n",
       "      <th>UserId</th>\n",
       "      <th>ProfileName</th>\n",
       "      <th>HelpfulnessNumerator</th>\n",
       "      <th>HelpfulnessDenominator</th>\n",
       "      <th>Score</th>\n",
       "      <th>Time</th>\n",
       "      <th>Summary</th>\n",
       "      <th>Text</th>\n",
       "      <th>Cleaned_Text</th>\n",
       "      <th>Cleaned_Summary</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>85543</th>\n",
       "      <td>93153</td>\n",
       "      <td>B004YV80OE</td>\n",
       "      <td>A3C9YGB4H90PDE</td>\n",
       "      <td>Karla Cook</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2011-10-11</td>\n",
       "      <td>not impressed</td>\n",
       "      <td>My family was not impressed with this dish. I ...</td>\n",
       "      <td>family impressed dish wasnot expecting taste l...</td>\n",
       "      <td>impressed</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>475822</th>\n",
       "      <td>514557</td>\n",
       "      <td>B000CQ6KTM</td>\n",
       "      <td>A155VP0YLXER8A</td>\n",
       "      <td>Eric Hirsch</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>2012-03-01</td>\n",
       "      <td>If you like eating GLUE</td>\n",
       "      <td>I buy quality, more natural mac &amp; cheese quite...</td>\n",
       "      <td>buy quality natural mac cheese quite regularly...</td>\n",
       "      <td>like eating glue</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>426844</th>\n",
       "      <td>461620</td>\n",
       "      <td>B000F9XBBQ</td>\n",
       "      <td>A3KPRKS4YSOZWN</td>\n",
       "      <td>All Rater</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2012-03-30</td>\n",
       "      <td>Terrible</td>\n",
       "      <td>It has hidden MSG (a known neurotoxin). Terrib...</td>\n",
       "      <td>hidden msg known neurotoxin terrible tasting l...</td>\n",
       "      <td>terrible</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>437280</th>\n",
       "      <td>472899</td>\n",
       "      <td>B004HLAHUQ</td>\n",
       "      <td>AMTI5N71G3A9</td>\n",
       "      <td>GaGatorGal</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2012-03-06</td>\n",
       "      <td>Bitter and Watery</td>\n",
       "      <td>While I know dark chocolate is not super sweet...</td>\n",
       "      <td>know dark chocolate super sweet like milk choc...</td>\n",
       "      <td>bitter watery</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>195745</th>\n",
       "      <td>212194</td>\n",
       "      <td>B000CNB4LE</td>\n",
       "      <td>A11R1IA3Y91WS6</td>\n",
       "      <td>Little LuLu</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2012-09-03</td>\n",
       "      <td>Container top problems</td>\n",
       "      <td>I love the product itself, but I do not like t...</td>\n",
       "      <td>love product like container garage large refri...</td>\n",
       "      <td>container top problems</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Id   ProductId          UserId  ProfileName  HelpfulnessNumerator  \\\n",
       "85543    93153  B004YV80OE  A3C9YGB4H90PDE   Karla Cook                     0   \n",
       "475822  514557  B000CQ6KTM  A155VP0YLXER8A  Eric Hirsch                     1   \n",
       "426844  461620  B000F9XBBQ  A3KPRKS4YSOZWN    All Rater                     1   \n",
       "437280  472899  B004HLAHUQ    AMTI5N71G3A9   GaGatorGal                     0   \n",
       "195745  212194  B000CNB4LE  A11R1IA3Y91WS6  Little LuLu                     1   \n",
       "\n",
       "        HelpfulnessDenominator  Score       Time                  Summary  \\\n",
       "85543                        0      0 2011-10-11            not impressed   \n",
       "475822                       5      0 2012-03-01  If you like eating GLUE   \n",
       "426844                       1      0 2012-03-30                 Terrible   \n",
       "437280                       0      0 2012-03-06        Bitter and Watery   \n",
       "195745                       1      0 2012-09-03   Container top problems   \n",
       "\n",
       "                                                     Text  \\\n",
       "85543   My family was not impressed with this dish. I ...   \n",
       "475822  I buy quality, more natural mac & cheese quite...   \n",
       "426844  It has hidden MSG (a known neurotoxin). Terrib...   \n",
       "437280  While I know dark chocolate is not super sweet...   \n",
       "195745  I love the product itself, but I do not like t...   \n",
       "\n",
       "                                             Cleaned_Text  \\\n",
       "85543   family impressed dish wasnot expecting taste l...   \n",
       "475822  buy quality natural mac cheese quite regularly...   \n",
       "426844  hidden msg known neurotoxin terrible tasting l...   \n",
       "437280  know dark chocolate super sweet like milk choc...   \n",
       "195745  love product like container garage large refri...   \n",
       "\n",
       "               Cleaned_Summary  \n",
       "85543                impressed  \n",
       "475822        like eating glue  \n",
       "426844                terrible  \n",
       "437280           bitter watery  \n",
       "195745  container top problems  "
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# taking equal no. of negative and positive data points\n",
    "data_pos=final_data[final_data['Score']==1].sample(n=57000)\n",
    "data_neg=final_data[final_data['Score']==0].sample(n=57000)\n",
    "final=pd.concat([data_pos,data_neg])\n",
    "final.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 1.365822,
     "end_time": "2021-03-22T18:11:19.785341",
     "exception": false,
     "start_time": "2021-03-22T18:11:18.419519",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Performs hyperparameter tuning for a logistic regression model using cross-validation to determine the optimal regularization strength (C value) for the model.\n",
    "Evaluate different regularization strengths (C values) for a logistic regression model using cross-validation to find the value that minimizes misclassification error, and then visualizes the relationship between C values and misclassification error."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of X (114000,)\n",
      "Shape of y (114000,)\n",
      "Shape of X_train: (55860,) Shape of y_train: (55860,)\n",
      "Shape of X_cv: (23940,) Shape of y_cv: (23940,)\n",
      "Shape of X_test: (34200,) Shape of y_test: (34200,)\n",
      "Evaluating Logistic Regression with Bag of Words:\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Misclassification Error: 0.1287\n",
      "Evaluating RandomForest with Bag of Words:\n",
      "Evaluating Logistic Regression with TF-IDF:\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Misclassification Error: 0.1415\n",
      "Evaluating Logistic Regression with Average Word2Vec:\n",
      "Evaluating RandomForest with Average Word2Vec:\n",
      "+---------------------+--------------+----------------+---------------------+----------------------------+--------------------+\n",
      "|        Model        |  Vectorizer  | Regularization | Feature Engineering | Hyperparameter (C or Grid) |        AUC         |\n",
      "+---------------------+--------------+----------------+---------------------+----------------------------+--------------------+\n",
      "| Logistic Regression | Bag of Words |       L2       |         None        |           0.0001           | 0.9351606917703469 |\n",
      "| Logistic Regression |    TF-IDF    |       L2       |         None        |           10000            | 0.9334691501324204 |\n",
      "+---------------------+--------------+----------------+---------------------+----------------------------+--------------------+\n",
      "Review: 'This product is fantastic! I love it.'\n",
      "Sentiment: Positive (Probability: 0.5140)\n"
     ]
    }
   ],
   "source": [
    "\n",
    "#Do not delete\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.model_selection import train_test_split, StratifiedShuffleSplit, cross_val_score, GridSearchCV\n",
    "from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import roc_auc_score, roc_curve, confusion_matrix, accuracy_score\n",
    "from joblib import Parallel, delayed\n",
    "import math\n",
    "from tqdm import tqdm\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "from gensim.models import Word2Vec\n",
    "from prettytable import PrettyTable\n",
    "\n",
    "# Load your data into final_data (assuming final_data is already available)\n",
    "# final_data = pd.read_csv('your_data.csv')  # Example: Load your dataset\n",
    "\n",
    "# Taking equal number of positive and negative data points\n",
    "data_pos = final_data[final_data['Score'] == 1].sample(n=57000, random_state=0)\n",
    "data_neg = final_data[final_data['Score'] == 0].sample(n=57000, random_state=0)\n",
    "final = pd.concat([data_pos, data_neg])\n",
    "\n",
    "# Checking shapes to ensure consistency\n",
    "y = final['Score']\n",
    "X = final['Cleaned_Text']\n",
    "print(\"Shape of X\", X.shape)\n",
    "print(\"Shape of y\", y.shape)\n",
    "\n",
    "# Splitting the dataset\n",
    "X_tr, X_test, y_tr, y_test = train_test_split(X, y, test_size=0.30, random_state=0)\n",
    "X_train, X_cv, y_train, y_cv = train_test_split(X_tr, y_tr, test_size=0.30, random_state=0)\n",
    "\n",
    "# Verify that the shapes match\n",
    "print('Shape of X_train:', X_train.shape, 'Shape of y_train:', y_train.shape)\n",
    "print('Shape of X_cv:', X_cv.shape, 'Shape of y_cv:', y_cv.shape)\n",
    "print('Shape of X_test:', X_test.shape, 'Shape of y_test:', y_test.shape)\n",
    "\n",
    "# Function to plot AUC vs. Log(C) for Train and Cross-Validation Sets\n",
    "def plot_auc_vs_logc(auc_train, auc_cv, regularization_strengths):\n",
    "    log_reg_strengths = [math.log(x) for x in regularization_strengths]\n",
    "    plt.figure(figsize=(10, 6))\n",
    "    plt.plot(log_reg_strengths, auc_train, color='green', marker='o', label='AUC Train')\n",
    "    plt.plot(log_reg_strengths, auc_cv, color='red', marker='o', label='AUC Cross-Validation')\n",
    "    plt.axvline(x=log_reg_strengths[np.argmax(auc_cv)], color='blue', linestyle='--', label='Optimal C')\n",
    "    plt.legend(loc='best')\n",
    "    plt.xlabel('log(C)')\n",
    "    plt.ylabel('AUC')\n",
    "    plt.title('AUC vs. log(C) for Train and Cross-Validation Sets')\n",
    "    plt.grid(True)\n",
    "    plt.show()\n",
    "\n",
    "# Function to train and evaluate Logistic Regression model with cross-validation\n",
    "def train_evaluate_logreg(X_train, y_train, X_cv, y_cv, X_test, y_test, regularization_strengths):\n",
    "    auc_train_scores = []\n",
    "    auc_cv_scores = []\n",
    "\n",
    "    for C in regularization_strengths:\n",
    "        model = LogisticRegression(penalty='l2', C=C, max_iter=10000)\n",
    "        model.fit(X_train, y_train)\n",
    "\n",
    "        y_train_pred_prob = model.predict_proba(X_train)[:, 1]\n",
    "        y_cv_pred_prob = model.predict_proba(X_cv)[:, 1]\n",
    "\n",
    "        auc_train_scores.append(roc_auc_score(y_train, y_train_pred_prob))\n",
    "        auc_cv_scores.append(roc_auc_score(y_cv, y_cv_pred_prob))\n",
    "\n",
    "    optimal_C = regularization_strengths[np.argmax(auc_cv_scores)]\n",
    "    plot_auc_vs_logc(auc_train_scores, auc_cv_scores, regularization_strengths)\n",
    "\n",
    "    # Train final model with optimal C\n",
    "    model = LogisticRegression(penalty='l2', C=optimal_C, max_iter=10000)\n",
    "    model.fit(X_train, y_train)\n",
    "\n",
    "    y_train_pred_prob = model.predict_proba(X_train)[:, 1]\n",
    "    y_test_pred_prob = model.predict_proba(X_test)[:, 1]\n",
    "\n",
    "    # Compute ROC curves and AUC\n",
    "    fpr_train, tpr_train, _ = roc_curve(y_train, y_train_pred_prob)\n",
    "    fpr_test, tpr_test, _ = roc_curve(y_test, y_test_pred_prob)\n",
    "\n",
    "    auc_train = roc_auc_score(y_train, y_train_pred_prob)\n",
    "    auc_test = roc_auc_score(y_test, y_test_pred_prob)\n",
    "\n",
    "    # Plot ROC curves\n",
    "    plt.figure(figsize=(10, 6))\n",
    "    plt.plot(fpr_train, tpr_train, label=f'Train ROC (AUC = {auc_train:.4f})', color='green')\n",
    "    plt.plot(fpr_test, tpr_test, label=f'Test ROC (AUC = {auc_test:.4f})', color='blue')\n",
    "    plt.title(\"ROC Curve\")\n",
    "    plt.xlabel(\"False Positive Rate (FPR)\")\n",
    "    plt.ylabel(\"True Positive Rate (TPR)\")\n",
    "    plt.legend(loc='best')\n",
    "    plt.grid(True)\n",
    "    plt.show()\n",
    "\n",
    "    # Confusion Matrix\n",
    "    y_test_pred = model.predict(X_test)\n",
    "    confusion_mat = confusion_matrix(y_test, y_test_pred)\n",
    "    class_labels = [\"Negative\", \"Positive\"]\n",
    "    df_confusion_mat = pd.DataFrame(confusion_mat, columns=class_labels, index=class_labels)\n",
    "\n",
    "    plt.figure(figsize=(8, 6))\n",
    "    sns.heatmap(df_confusion_mat, annot=True, fmt='d', cmap='Blues', cbar=False, linewidths=0.5, linecolor='black')\n",
    "    plt.title(\"Confusion Matrix\")\n",
    "    plt.xlabel(\"Predicted Label\")\n",
    "    plt.ylabel(\"True Label\")\n",
    "    plt.show()\n",
    "\n",
    "    # Misclassification Error\n",
    "    misclassification_error = 1 - accuracy_score(y_test, y_test_pred)\n",
    "    print(f\"Misclassification Error: {misclassification_error:.4f}\")\n",
    "\n",
    "    return auc_test, model\n",
    "\n",
    "# Function to train and evaluate RandomForest model with cross-validation\n",
    "def train_evaluate_rf(X_train, y_train, X_cv, y_cv, X_test, y_test, param_grid):\n",
    "    rf = RandomForestClassifier(random_state=0)\n",
    "    grid_search = GridSearchCV(rf, param_grid, cv=5, scoring='roc_auc', n_jobs=-1)\n",
    "    grid_search.fit(X_train, y_train)\n",
    "\n",
    "    best_rf = grid_search.best_estimator_\n",
    "    \n",
    "    y_train_pred_prob = best_rf.predict_proba(X_train)[:, 1]\n",
    "    y_test_pred_prob = best_rf.predict_proba(X_test)[:, 1]\n",
    "\n",
    "    # Compute ROC curves and AUC\n",
    "    fpr_train, tpr_train, _ = roc_curve(y_train, y_train_pred_prob)\n",
    "    fpr_test, tpr_test, _ = roc_curve(y_test, y_test_pred_prob)\n",
    "\n",
    "    auc_train = roc_auc_score(y_train, y_train_pred_prob)\n",
    "    auc_test = roc_auc_score(y_test, y_test_pred_prob)\n",
    "\n",
    "    # Plot ROC curves\n",
    "    plt.figure(figsize=(10, 6))\n",
    "    plt.plot(fpr_train, tpr_train, label=f'Train ROC (AUC = {auc_train:.4f})', color='green')\n",
    "    plt.plot(fpr_test, tpr_test, label=f'Test ROC (AUC = {auc_test:.4f})', color='blue')\n",
    "    plt.title(\"ROC Curve\")\n",
    "    plt.xlabel(\"False Positive Rate (FPR)\")\n",
    "    plt.ylabel(\"True Positive Rate (TPR)\")\n",
    "    plt.legend(loc='best')\n",
    "    plt.grid(True)\n",
    "    plt.show()\n",
    "\n",
    "    # Confusion Matrix\n",
    "    y_test_pred = best_rf.predict(X_test)\n",
    "    confusion_mat = confusion_matrix(y_test, y_test_pred)\n",
    "    class_labels = [\"Negative\", \"Positive\"]\n",
    "    df_confusion_mat = pd.DataFrame(confusion_mat, columns=class_labels, index=class_labels)\n",
    "\n",
    "    plt.figure(figsize=(8, 6))\n",
    "    sns.heatmap(df_confusion_mat, annot=True, fmt='d', cmap='Blues', cbar=False, linewidths=0.5, linecolor='black')\n",
    "    plt.title(\"Confusion Matrix\")\n",
    "    plt.xlabel(\"Predicted Label\")\n",
    "    plt.ylabel(\"True Label\")\n",
    "    plt.show()\n",
    "\n",
    "    # Misclassification Error\n",
    "    misclassification_error = 1 - accuracy_score(y_test, y_test_pred)\n",
    "    print(f\"Misclassification Error: {misclassification_error:.4f}\")\n",
    "\n",
    "    return auc_test, best_rf\n",
    "\n",
    "\n",
    "# Bag of Words (BoW)\n",
    "bow_count_vect = CountVectorizer()\n",
    "bow_count_vect.fit(X_train)\n",
    "\n",
    "X_train_bow = bow_count_vect.transform(X_train)\n",
    "X_cv_bow = bow_count_vect.transform(X_cv)\n",
    "X_test_bow = bow_count_vect.transform(X_test)\n",
    "\n",
    "# Standardize the data\n",
    "scaler = StandardScaler(with_mean=False)\n",
    "X_train_bow = scaler.fit_transform(X_train_bow)\n",
    "X_cv_bow = scaler.transform(X_cv_bow)\n",
    "X_test_bow = scaler.transform(X_test_bow)\n",
    "\n",
    "# Train and evaluate Logistic Regression using Bag of Words\n",
    "print(\"Evaluating Logistic Regression with Bag of Words:\")\n",
    "auc_bow, model_bow = train_evaluate_logreg(X_train_bow, y_train, X_cv_bow, y_cv, X_test_bow, y_test, regularization_strengths=[0.0001, 0.001, 0.01, 0.1, 1, 10, 100])\n",
    "\n",
    "# Train and evaluate RandomForest using Bag of Words\n",
    "print(\"Evaluating RandomForest with Bag of Words:\")\n",
    "# param_grid_rf = {'n_estimators': [100, 200, 300], 'max_depth': [None, 10, 20], 'min_samples_split': [2, 5, 10]}\n",
    "# auc_rf_bow, model_rf_bow = train_evaluate_rf(X_train_bow, y_train, X_cv_bow, y_cv, X_test_bow, y_test, param_grid_rf)\n",
    "\n",
    "# TF-IDF\n",
    "tfidf_vect = TfidfVectorizer()\n",
    "tfidf_vect.fit(X_train)\n",
    "\n",
    "X_train_tfidf = tfidf_vect.transform(X_train)\n",
    "X_cv_tfidf = tfidf_vect.transform(X_cv)\n",
    "X_test_tfidf = tfidf_vect.transform(X_test)\n",
    "\n",
    "# Standardize the data\n",
    "X_train_tfidf = scaler.fit_transform(X_train_tfidf)\n",
    "X_cv_tfidf = scaler.transform(X_cv_tfidf)\n",
    "X_test_tfidf = scaler.transform(X_test_tfidf)\n",
    "\n",
    "# Train and evaluate Logistic Regression using TF-IDF\n",
    "print(\"Evaluating Logistic Regression with TF-IDF:\")\n",
    "auc_tfidf, model_tfidf = train_evaluate_logreg(X_train_tfidf, y_train, X_cv_tfidf, y_cv, X_test_tfidf, y_test, regularization_strengths=[0.0001, 0.001, 0.01, 0.1, 1, 10, 100, 10000])\n",
    "\n",
    "# Train and evaluate RandomForest using TF-IDF\n",
    "# print(\"Evaluating RandomForest with TF-IDF:\")\n",
    "# auc_rf_tfidf, model_rf_tfidf = train_evaluate_rf(X_train_tfidf, y_train, X_cv_tfidf, y_cv, X_test_tfidf, y_test, param_grid_rf)\n",
    "\n",
    "# Word2Vec\n",
    "# list_of_X_train = [sentence.split() for sentence in X_train]\n",
    "# list_of_X_cv = [sentence.split() for sentence in X_cv]\n",
    "# list_of_X_test = [sentence.split() for sentence in X_test]\n",
    "\n",
    "# w2v_model = Word2Vec(list_of_X_train, min_count=5, vector_size=50, workers=4)\n",
    "# w2v_words = list(w2v_model.wv.index_to_key)\n",
    "\n",
    "# # Function to compute average Word2Vec for each sentence\n",
    "# def compute_avg_w2v(sentences, model, w2v_words):\n",
    "#     sentence_vectors = []\n",
    "#     for sentence in tqdm(sentences):\n",
    "#         sent_vec = np.zeros(50)\n",
    "#         count_words = 0\n",
    "#         for word in sentence:\n",
    "#             if word in w2v_words:\n",
    "#                 vec = model.wv[word]\n",
    "#                 sent_vec += vec\n",
    "#                 count_words += 1\n",
    "#         if count_words != 0:\n",
    "#             sent_vec /= count_words\n",
    "#         sentence_vectors.append(sent_vec)\n",
    "#     return sentence_vectors\n",
    "\n",
    "# X_train_avg_w2v = compute_avg_w2v(list_of_X_train, w2v_model, w2v_words)\n",
    "# X_cv_avg_w2v = compute_avg_w2v(list_of_X_cv, w2v_model, w2v_words)\n",
    "# X_test_avg_w2v = compute_avg_w2v(list_of_X_test, w2v_model, w2v_words)\n",
    "\n",
    "# # Standardize the data\n",
    "# X_train_avg_w2v = scaler.fit_transform(X_train_avg_w2v)\n",
    "# X_cv_avg_w2v = scaler.transform(X_cv_avg_w2v)\n",
    "# X_test_avg_w2v = scaler.transform(X_test_avg_w2v)\n",
    "\n",
    "# Train and evaluate Logistic Regression using Average Word2Vec\n",
    "print(\"Evaluating Logistic Regression with Average Word2Vec:\")\n",
    "#auc_avg_w2v, model_avg_w2v = train_evaluate_logreg(X_train_avg_w2v, y_train, X_cv_avg_w2v, y_cv, X_test_avg_w2v, y_test, regularization_strengths=[0.0001, 0.001, 0.01, 0.1, 1, 10, 100])\n",
    "\n",
    "# Train and evaluate RandomForest using Average Word2Vec\n",
    "print(\"Evaluating RandomForest with Average Word2Vec:\")\n",
    "# auc_rf_avg_w2v, model_rf_avg_w2v = train_evaluate_rf(X_train_avg_w2v, y_train, X_cv_avg_w2v, y_cv, X_test_avg_w2v, y_test, param_grid_rf)\n",
    "\n",
    "# TF-IDF Weighted Word2Vec\n",
    "# def compute_weighted_w2v(X_train, X_cv, X_test, tfidf_vect, w2v_model):\n",
    "#     tfidf_w2v_train = np.zeros((X_train.shape[0], 50))\n",
    "#     tfidf_w2v_cv = np.zeros((X_cv.shape[0], 50))\n",
    "#     tfidf_w2v_test = np.zeros((X_test.shape[0], 50))\n",
    "\n",
    "#     tfidf_feature_names = tfidf_vect.get_feature_names_out()\n",
    "#     tfidf_matrix_train = tfidf_vect.transform(X_train).toarray()\n",
    "#     tfidf_matrix_cv = tfidf_vect.transform(X_cv).toarray()\n",
    "#     tfidf_matrix_test = tfidf_vect.transform(X_test).toarray()\n",
    "\n",
    "#     for i, sentence in enumerate(X_train):\n",
    "#         for word in sentence.split():\n",
    "#             if word in w2v_model.wv and word in tfidf_feature_names:\n",
    "#                 tfidf_w2v_train[i] += tfidf_matrix_train[i, tfidf_feature_names.tolist().index(word)] * w2v_model.wv[word]\n",
    "\n",
    "#     for i, sentence in enumerate(X_cv):\n",
    "#         for word in sentence.split():\n",
    "#             if word in w2v_model.wv and word in tfidf_feature_names:\n",
    "#                 tfidf_w2v_cv[i] += tfidf_matrix_cv[i, tfidf_feature_names.tolist().index(word)] * w2v_model.wv[word]\n",
    "\n",
    "#     for i, sentence in enumerate(X_test):\n",
    "#         for word in sentence.split():\n",
    "#             if word in w2v_model.wv and word in tfidf_feature_names:\n",
    "#                 tfidf_w2v_test[i] += tfidf_matrix_test[i, tfidf_feature_names.tolist().index(word)] * w2v_model.wv[word]\n",
    "\n",
    "#     return tfidf_w2v_train, tfidf_w2v_cv, tfidf_w2v_test\n",
    "\n",
    "# X_train_w2v_weighted, X_cv_w2v_weighted, X_test_w2v_weighted = compute_weighted_w2v(X_train, X_cv, X_test, tfidf_vect, w2v_model)\n",
    "\n",
    "# # Standardize the data\n",
    "# X_train_w2v_weighted = scaler.fit_transform(X_train_w2v_weighted)\n",
    "# X_cv_w2v_weighted = scaler.transform(X_cv_w2v_weighted)\n",
    "# X_test_w2v_weighted = scaler.transform(X_test_w2v_weighted)\n",
    "\n",
    "# # Train and evaluate Logistic Regression using TF-IDF Weighted Word2Vec\n",
    "# print(\"Evaluating Logistic Regression with TF-IDF Weighted Word2Vec:\")\n",
    "# auc_w2v_weighted, model_w2v_weighted = train_evaluate_logreg(X_train_w2v_weighted, y_train, X_cv_w2v_weighted, y_cv, X_test_w2v_weighted, y_test, regularization_strengths=[0.0001, 0.001, 0.01, 0.1, 1, 10, 100])\n",
    "\n",
    "# # Train and evaluate RandomForest using TF-IDF Weighted Word2Vec\n",
    "# print(\"Evaluating RandomForest with TF-IDF Weighted Word2Vec:\")\n",
    "# auc_rf_w2v_weighted, model_rf_w2v_weighted = train_evaluate_rf(X_train_w2v_weighted, y_train, X_cv_w2v_weighted, y_cv, X_test_w2v_weighted, y_test, param_grid_rf)\n",
    "\n",
    "# Compare models using PrettyTable\n",
    "comparison_table = PrettyTable()\n",
    "comparison_table.field_names = [\"Model\", \"Vectorizer\", \"Regularization\", \"Feature Engineering\", \"Hyperparameter (C or Grid)\", \"AUC\"]\n",
    "\n",
    "comparison_table.add_row([\"Logistic Regression\", \"Bag of Words\", \"L2\", \"None\", 0.0001, auc_bow])\n",
    "# comparison_table.add_row([\"RandomForest\", \"Bag of Words\", \"None\", \"GridSearchCV\", str(param_grid_rf), auc_rf_bow])\n",
    "\n",
    "comparison_table.add_row([\"Logistic Regression\", \"TF-IDF\", \"L2\", \"None\", 10000, auc_tfidf])\n",
    "# comparison_table.add_row([\"RandomForest\", \"TF-IDF\", \"None\", \"GridSearchCV\", str(param_grid_rf), auc_rf_tfidf])\n",
    "\n",
    "# comparison_table.add_row([\"Logistic Regression\", \"Average W2V\", \"L2\", \"None\", 10, auc_avg_w2v])\n",
    "# comparison_table.add_row([\"RandomForest\", \"Average W2V\", \"None\", \"GridSearchCV\", str(param_grid_rf), auc_rf_avg_w2v])\n",
    "\n",
    "# comparison_table.add_row([\"Logistic Regression\", \"TF-IDF Weighted W2V\", \"L2\", \"None\", 1, auc_w2v_weighted])\n",
    "# comparison_table.add_row([\"RandomForest\", \"TF-IDF Weighted W2V\", \"None\", \"GridSearchCV\", str(param_grid_rf), auc_rf_w2v_weighted])\n",
    "\n",
    "print(comparison_table)\n",
    "\n",
    "# Function to analyze and classify a review\n",
    "def analysis_review(review_text, model, vectorizer):\n",
    "    review_vectorized = vectorizer.transform([review_text])\n",
    "    sentiment_prob = model.predict_proba(review_vectorized)[0, 1]\n",
    "    sentiment = 'Positive' if sentiment_prob >= 0.5 else 'Negative'\n",
    "    return sentiment, sentiment_prob\n",
    "\n",
    "# Example review analysis\n",
    "example_review = \"This product is fantastic! I love it.\"\n",
    "sentiment, probability = analysis_review(example_review, model_tfidf, tfidf_vect)\n",
    "print(f\"Review: '{example_review}'\")\n",
    "print(f\"Sentiment: {sentiment} (Probability: {probability:.4f})\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Review: 'This product is bad! I dont love it.'\n",
      "Sentiment: Negative (Probability: 0.4937)\n"
     ]
    }
   ],
   "source": [
    "example_review = \"This product is bad! I dont love it.\"\n",
    "sentiment, probability = analysis_review(example_review, model_tfidf, tfidf_vect)\n",
    "print(f\"Review: '{example_review}'\")\n",
    "print(f\"Sentiment: {sentiment} (Probability: {probability:.4f})\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {
    "papermill": {
     "duration": 10.541316,
     "end_time": "2021-03-22T19:59:12.665317",
     "exception": false,
     "start_time": "2021-03-22T19:59:02.124001",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "# Data for the models\n",
    "models = ['Bag of Words', 'TF-IDF', 'Average W2V', 'TF-IDF Weighted W2V']\n",
    "auc_scores = [0.9398, 0.9688, 0.9184, 0.8971]\n",
    "C_values = [0.0001, 10000, 10, 1]\n",
    "\n",
    "# Normalize C values for comparison\n",
    "C_normalized = np.log10(C_values)\n",
    "\n",
    "# Bar width\n",
    "bar_width = 0.35\n",
    "\n",
    "# Set up positions for bars\n",
    "index = np.arange(len(models))\n",
    "\n",
    "# Create grouped bar chart\n",
    "plt.figure(figsize=(12, 6))\n",
    "bar1 = plt.bar(index, auc_scores, bar_width, label='AUC Score', color='skyblue')\n",
    "bar2 = plt.bar(index + bar_width, C_normalized, bar_width, label='Log(C)', color='lightcoral')\n",
    "\n",
    "# Add labels and title\n",
    "plt.xlabel('Models')\n",
    "plt.title('Model Comparison: AUC Score and Regularization Parameter (Log(C))')\n",
    "plt.xticks(index + bar_width / 2, models)\n",
    "plt.legend()\n",
    "\n",
    "# Add value labels\n",
    "for bar in bar1:\n",
    "    yval = bar.get_height()\n",
    "    plt.text(bar.get_x() + bar.get_width()/2, yval, f'{yval:.4f}', va='bottom', ha='center')\n",
    "\n",
    "for bar in bar2:\n",
    "    yval = bar.get_height()\n",
    "    plt.text(bar.get_x() + bar.get_width()/2, yval, f'{yval:.2f}', va='bottom', ha='center')\n",
    "\n",
    "plt.grid(True, axis='y', linestyle='--', alpha=0.7)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "# Data for the models\n",
    "models = ['Bag of Words', 'TF-IDF', 'Average W2V', 'TF-IDF Weighted W2V']\n",
    "auc_scores = [0.9398, 0.9688, 0.9184, 0.8971]\n",
    "\n",
    "# Create a colormap based on the AUC scores\n",
    "colors = plt.cm.viridis(np.linspace(0, 1, len(models)))\n",
    "\n",
    "# Create a bar chart with the new color scheme\n",
    "plt.figure(figsize=(10, 6))\n",
    "bars = plt.barh(models, auc_scores, color=colors)\n",
    "\n",
    "# Add labels inside the bars for better readability\n",
    "for index, value in enumerate(auc_scores):\n",
    "    plt.text(value - 0.02, index, f'{value:.4f}', va='center', ha='right', fontsize=12, color='red', weight='bold')\n",
    "\n",
    "plt.xlabel('AUC Score', fontsize=14)\n",
    "plt.title('Model Comparison by AUC Score', fontsize=16, weight='bold')\n",
    "plt.grid(True, axis='x', linestyle='--', alpha=0.7)\n",
    "\n",
    "# Adjust x-axis limits to prevent text from overlapping the border\n",
    "plt.xlim(0.85, 1.0)\n",
    "\n",
    "# Optional: Add color bar for reference, but adjust its position to avoid overlap\n",
    "sm = plt.cm.ScalarMappable(cmap=plt.cm.viridis, norm=plt.Normalize(vmin=min(auc_scores), vmax=max(auc_scores)))\n",
    "sm.set_array([])\n",
    "plt.colorbar(sm, orientation='horizontal', pad=0.15, aspect=40)  # Moved color bar away from x-axis\n",
    "\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Review: 'This product is bad! I dont love it.'\n",
      "Sentiment: Positive (Probability: 0.5050)\n"
     ]
    }
   ],
   "source": [
    "review = \"This product was excellent and exceeded my expectations.\"\n",
    "\n",
    "example_review = \"This product is bad! I dont love it.\"\n",
    "sentiment, probability = analysis_review(review, model_tfidf, tfidf_vect)\n",
    "print(f\"Review: '{review}'\")\n",
    "print(f\"Sentiment: {sentiment} (Probability: {probability:.4f})\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 7070.501319,
   "end_time": "2021-03-22T19:59:24.659299",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2021-03-22T18:01:34.157980",
   "version": "2.2.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
